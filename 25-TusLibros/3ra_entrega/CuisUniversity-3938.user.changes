

----STARTUP---- (31 October 2019 17:05:52) as /home/gjimenez/Descargas/linux64/CuisUniversity-3938.image!


----End fileIn of /home/gjimenez/Descargas/linux64/25-TusLibros.st----!

----QUIT----(31 October 2019 20:56:32) CuisUniversity-3938.image priorSource: 14319118!

----STARTUP---- (4 November 2019 17:07:19) as /home/gjimenez/Descargas/linux64/CuisUniversity-3938.image!


!classRemoval: #TusLibrosApi stamp: 'g j 11/4/2019 17:07:27'!
Object subclass: #TusLibrosApi
	instanceVariableNames: 'tusLibrosStorageManager'
	classVariableNames: ''
	poolDictionaries: ''
	category: '25-TusLibros'!

!classRemoval: #StorageManager stamp: 'g j 11/4/2019 17:07:28'!
Object subclass: #StorageManager
	instanceVariableNames: 'books clients carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: '25-TusLibros'!

!classRemoval: #Cart stamp: 'g j 11/4/2019 17:07:28'!
Object subclass: #Cart
	instanceVariableNames: 'books last_transaction clientOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: '25-TusLibros'!

!classRemoval: #ApiCarritoTests stamp: 'g j 11/4/2019 17:07:29'!
TestCase subclass: #ApiCarritoTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '25-TusLibros'!

----End fileIn of /home/gjimenez/Descargas/linux64/TusLibros.st----!

!methodRemoval: CardTest #test05LaFechaDeExpiracionNoPuedeEstarVencida stamp: 'g j 11/4/2019 17:44:37'!
test05LaFechaDeExpiracionNoPuedeEstarVencida
	self 
		should: [Card initializeWithNumber: '213' owner: 'Lucas' expiration: (October of: 2019)] 
			raise: Error - MessageNotUnderstood 
				withMessageText: Card ErrorExpirationDate.!

!methodRemoval: CardTest #test04DueñoDeTarjetaNoPuedeTenerMasDe30Caracteres stamp: 'g j 11/4/2019 18:40:08'!
test04DueñoDeTarjetaNoPuedeTenerMasDe30Caracteres
	self 
		should: [Card initializeWithNumber: '213' owner: 'gonzalogonzalogonzalogonzalogonzalo' expiration: (October  of: 2020)] 
			raise: Error - MessageNotUnderstood 
				withMessageText: Card ErrorOwner.!

				'.' isLetter!

'.' isLetter!

$. isLetter!

$. isDigit!

$. isAlphaNumeric!

$. inspect!

!methodRemoval: CardTest #test07NumeroDeTarjetaDebeSerEntero stamp: 'g j 11/4/2019 18:43:27'!
test07NumeroDeTarjetaDebeSerEntero
	self 
		should: [Card initializeWithNumber: '1/3' owner: 'Lucas' expiration: (October of: 2020)] 
			raise: Error - MessageNotUnderstood 
				withMessageText: Card ErrorNumber .!

!methodRemoval: CardTest #test06NumeroDeTarjetaDebeSerPositivo stamp: 'g j 11/4/2019 18:43:34'!
test06NumeroDeTarjetaDebeSerPositivo
	self 
		should: [Card initializeWithNumber: '-213' owner: 'Lucas' expiration: (October of: 2020)] 
			raise: Error - MessageNotUnderstood 
				withMessageText: Card ErrorNumber .!
!CardTest methodsFor: 'as yet unclassified' stamp: 'g j 11/4/2019 18:44:01'!
test01NumeroDeTarjetaSoloPuedeTenerNumeros

	self 
		should: [Card initializeWithNumber: '12342A' owner: 'gonzalo' expiration: (October  of: 2020)] 
			raise: Error - MessageNotUnderstood 
				withMessageText: Card ErrorNumber.! !

!methodRemoval: CardTest #test01NumeroDeTarjetaNoPuedeTenerLetras stamp: 'g j 11/4/2019 18:44:01'!
test01NumeroDeTarjetaNoPuedeTenerLetras

	self 
		should: [Card initializeWithNumber: '12342A' owner: 'gonzalo' expiration: (October  of: 2020)] 
			raise: Error - MessageNotUnderstood 
				withMessageText: Card ErrorNumber.!

!testRun: #CardTest #test01NumeroDeTarjetaSoloPuedeTenerNumeros stamp: 'g j 11/4/2019 18:44:05'!
PASSED!

!testRun: #CardTest #test01NumeroDeTarjetaSoloPuedeTenerNumeros stamp: 'g j 11/4/2019 18:44:05'!
PASSED!

!testRun: #CardTest #test02NumeroDeTarjetaNoPuedeSerVacio stamp: 'g j 11/4/2019 18:44:05'!
PASSED!

!testRun: #CardTest #test03DueñoDeTarjetaNoPuedeSerVacio stamp: 'g j 11/4/2019 18:44:05'!
PASSED!

!classDefinition: #Cart category: #TusLibros stamp: 'g j 11/4/2019 18:49:00'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items montoTotal'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'g j 11/4/2019 18:49:09' prior: 50778286!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.
	
	montoTotal := montoTotal + aQuantity * 1.
	
	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!Cart methodsFor: 'adding' stamp: 'g j 11/4/2019 18:49:56' prior: 50778393!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.
	
	montoTotal := montoTotal + (aQuantity *  catalog at: anItem).
	
	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!Cart methodsFor: 'initialization' stamp: 'g j 11/4/2019 18:50:16' prior: 50778264!
initializeAcceptingItemsOf: aCatalog

	montoTotal:= 0.
	catalog := aCatalog.
	items := OrderedCollection new.! !
!CartTest methodsFor: 'tests' stamp: 'g j 11/4/2019 18:51:49'!
test09NewCartHasZeroTotalAmount

	| cart |
	
	cart := self createCart.
	
	self assert: 0 equals: cart montoTotal.! !
!Cart methodsFor: 'testing' stamp: 'g j 11/4/2019 18:52:16'!
montoTotal
	
	^montoTotal.! !

!testRun: #CartTest #test09NewCartHasZeroTotalAmount stamp: 'g j 11/4/2019 18:52:23'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'g j 11/4/2019 18:52:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'g j 11/4/2019 18:52:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/4/2019 18:52:23'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'g j 11/4/2019 18:52:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'g j 11/4/2019 18:52:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'g j 11/4/2019 18:52:23'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'g j 11/4/2019 18:52:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'g j 11/4/2019 18:52:23'!
ERROR!

!testRun: #CartTest #test09NewCartHasZeroTotalAmount stamp: 'g j 11/4/2019 18:52:23'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'g j 11/4/2019 18:52:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'g j 11/4/2019 18:52:36'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'g j 11/4/2019 18:52:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'g j 11/4/2019 18:52:36'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'g j 11/4/2019 18:52:36'!
PASSED!

!testRun: #CartTest #test09NewCartHasZeroTotalAmount stamp: 'g j 11/4/2019 18:52:36'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/4/2019 18:52:36'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'g j 11/4/2019 18:52:36'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'g j 11/4/2019 18:52:36'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/4/2019 18:52:39'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'g j 11/4/2019 18:52:59' prior: 50778402!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.
	
	montoTotal := montoTotal + (aQuantity *  (catalog at: anItem)).
	
	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/4/2019 18:53:05'!
ERROR!

!testRun: #CartTest #test09NewCartHasZeroTotalAmount stamp: 'g j 11/4/2019 18:53:13'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'g j 11/4/2019 18:53:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'g j 11/4/2019 18:53:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/4/2019 18:53:13'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'g j 11/4/2019 18:53:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'g j 11/4/2019 18:53:13'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'g j 11/4/2019 18:53:13'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'g j 11/4/2019 18:53:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'g j 11/4/2019 18:53:13'!
ERROR!

!testRun: #CartTest #test09NewCartHasZeroTotalAmount stamp: 'g j 11/4/2019 18:53:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/4/2019 18:53:19'!
ERROR!

----End fileIn of /home/gjimenez/Descargas/linux64/Packages/TerseGuide.pck.st----!
!CartTest methodsFor: 'support' stamp: 'g j 11/4/2019 18:58:42' prior: 50778069!
defaultCatalog
	| catalog |
	catalog := Dictionary new.
	catalog add: 'Juans Book' -> 200.
	catalog add: 'Coso' -> 123.
	^catalog! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'g j 11/4/2019 18:59:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'g j 11/4/2019 18:59:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/4/2019 18:59:14'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'g j 11/4/2019 18:59:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'g j 11/4/2019 18:59:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'g j 11/4/2019 18:59:14'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'g j 11/4/2019 18:59:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'g j 11/4/2019 18:59:14'!
ERROR!

!testRun: #CartTest #test09NewCartHasZeroTotalAmount stamp: 'g j 11/4/2019 18:59:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/4/2019 18:59:21'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'g j 11/4/2019 19:00:18' prior: 50778078!
itemSellByTheStore
	
	^ 'Juans Book'! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'g j 11/4/2019 19:00:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'g j 11/4/2019 19:00:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/4/2019 19:00:19'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'g j 11/4/2019 19:00:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'g j 11/4/2019 19:00:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'g j 11/4/2019 19:00:19'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'g j 11/4/2019 19:00:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'g j 11/4/2019 19:00:19'!
ERROR!

!testRun: #CartTest #test09NewCartHasZeroTotalAmount stamp: 'g j 11/4/2019 19:00:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/4/2019 19:00:24'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/4/2019 19:01:24'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'g j 11/4/2019 19:02:10' prior: 50778251!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/4/2019 19:02:45'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'g j 11/4/2019 19:03:21'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'g j 11/4/2019 19:03:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'g j 11/4/2019 19:03:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/4/2019 19:03:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'g j 11/4/2019 19:03:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'g j 11/4/2019 19:03:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'g j 11/4/2019 19:03:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'g j 11/4/2019 19:03:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'g j 11/4/2019 19:03:21'!
PASSED!

!testRun: #CartTest #test09NewCartHasZeroTotalAmount stamp: 'g j 11/4/2019 19:03:21'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'g j 11/4/2019 19:04:49'!
test10CartWithABookHasATotalAmountOfTheBooksPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 'Juans Book'.
	
	
	self assert: 20 equals: cart montoTotal.! !

!testRun: #CartTest #test10CartWithABookHasATotalAmountOfTheBooksPrice stamp: 'g j 11/4/2019 19:05:01'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'g j 11/4/2019 19:05:08' prior: 50781670!
test10CartWithABookHasATotalAmountOfTheBooksPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 'Juans Book'.
	
	
	self assert: 200 equals: cart montoTotal.! !

!testRun: #CartTest #test10CartWithABookHasATotalAmountOfTheBooksPrice stamp: 'g j 11/4/2019 19:05:08'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'g j 11/4/2019 19:05:08'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'g j 11/4/2019 19:05:08'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/4/2019 19:05:08'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'g j 11/4/2019 19:05:08'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'g j 11/4/2019 19:05:08'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'g j 11/4/2019 19:05:08'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'g j 11/4/2019 19:05:08'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'g j 11/4/2019 19:05:08'!
PASSED!

!testRun: #CartTest #test09NewCartHasZeroTotalAmount stamp: 'g j 11/4/2019 19:05:08'!
PASSED!

!testRun: #CartTest #test10CartWithABookHasATotalAmountOfTheBooksPrice stamp: 'g j 11/4/2019 19:05:08'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'g j 11/4/2019 19:05:57'!
test11CartWithABookHasATotalAmountOfTheBooksPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: 'Juans Book'.
	
	
	self assert: 300 equals: cart montoTotal.! !

!testRun: #CartTest #test11CartWithABookHasATotalAmountOfTheBooksPrice stamp: 'g j 11/4/2019 19:05:58'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'g j 11/4/2019 19:06:03' prior: 50781725!
test11CartWithABookHasATotalAmountOfTheBooksPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: 'Juans Book'.
	
	
	self assert: 400 equals: cart montoTotal.! !

!testRun: #CartTest #test11CartWithABookHasATotalAmountOfTheBooksPrice stamp: 'g j 11/4/2019 19:06:04'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'g j 11/4/2019 19:06:04'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'g j 11/4/2019 19:06:04'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/4/2019 19:06:04'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'g j 11/4/2019 19:06:04'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'g j 11/4/2019 19:06:04'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'g j 11/4/2019 19:06:04'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'g j 11/4/2019 19:06:04'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'g j 11/4/2019 19:06:04'!
PASSED!

!testRun: #CartTest #test09NewCartHasZeroTotalAmount stamp: 'g j 11/4/2019 19:06:04'!
PASSED!

!testRun: #CartTest #test10CartWithABookHasATotalAmountOfTheBooksPrice stamp: 'g j 11/4/2019 19:06:04'!
PASSED!

!testRun: #CartTest #test11CartWithABookHasATotalAmountOfTheBooksPrice stamp: 'g j 11/4/2019 19:06:04'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'g j 11/4/2019 19:07:13'!
test12CartWithBooksHasATotalAmountOfTheBooksPrices

	| cart |
	
	cart := self createCart.
	
	cart add: 1 of: 'Juans Book'.
	
	cart add: 1 of: 'Coso'.
	
	
	self assert: 323 equals: cart montoTotal.! !

!testRun: #CartTest #test12CartWithBooksHasATotalAmountOfTheBooksPrices stamp: 'g j 11/4/2019 19:07:14'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'g j 11/4/2019 19:07:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'g j 11/4/2019 19:07:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/4/2019 19:07:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'g j 11/4/2019 19:07:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'g j 11/4/2019 19:07:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'g j 11/4/2019 19:07:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'g j 11/4/2019 19:07:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'g j 11/4/2019 19:07:14'!
PASSED!

!testRun: #CartTest #test09NewCartHasZeroTotalAmount stamp: 'g j 11/4/2019 19:07:14'!
PASSED!

!testRun: #CartTest #test10CartWithABookHasATotalAmountOfTheBooksPrice stamp: 'g j 11/4/2019 19:07:14'!
PASSED!

!testRun: #CartTest #test11CartWithABookHasATotalAmountOfTheBooksPrice stamp: 'g j 11/4/2019 19:07:14'!
PASSED!

!testRun: #CartTest #test12CartWithBooksHasATotalAmountOfTheBooksPrices stamp: 'g j 11/4/2019 19:07:14'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'g j 11/4/2019 19:08:02'!
test11CartWith2SameBooksHasATotalAmountOfTheBooksPriceTwice

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: 'Juans Book'.
	
	
	self assert: 400 equals: cart montoTotal.! !

!testRun: #CartTest #test11CartWith2SameBooksHasATotalAmountOfTheBooksPriceTwice stamp: 'g j 11/4/2019 19:08:02'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'g j 11/4/2019 19:08:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'g j 11/4/2019 19:08:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/4/2019 19:08:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'g j 11/4/2019 19:08:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'g j 11/4/2019 19:08:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'g j 11/4/2019 19:08:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'g j 11/4/2019 19:08:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'g j 11/4/2019 19:08:02'!
PASSED!

!testRun: #CartTest #test09NewCartHasZeroTotalAmount stamp: 'g j 11/4/2019 19:08:02'!
PASSED!

!testRun: #CartTest #test10CartWithABookHasATotalAmountOfTheBooksPrice stamp: 'g j 11/4/2019 19:08:02'!
PASSED!

!testRun: #CartTest #test11CartWith2SameBooksHasATotalAmountOfTheBooksPriceTwice stamp: 'g j 11/4/2019 19:08:02'!
PASSED!

!testRun: #CartTest #test11CartWithABookHasATotalAmountOfTheBooksPrice stamp: 'g j 11/4/2019 19:08:02'!
PASSED!

!testRun: #CartTest #test12CartWithBooksHasATotalAmountOfTheBooksPrices stamp: 'g j 11/4/2019 19:08:02'!
PASSED!

!methodRemoval: CartTest #test11CartWithABookHasATotalAmountOfTheBooksPrice stamp: 'g j 11/4/2019 19:08:10'!
test11CartWithABookHasATotalAmountOfTheBooksPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: 'Juans Book'.
	
	
	self assert: 400 equals: cart montoTotal.!
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 19:10:01' prior: 50777870!
test05CajeroNoPuedeCheckoutearTarjetaVencida

	| cajero priceList |
	
	priceList := self createPriceList.
	cajero := Cajero new initializeWithPriceList: priceList.
! !
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 19:13:44' prior: 50781899!
test05CajeroNoPuedeCheckoutearTarjetaVencida

	| cajero priceList cart creditCard |
	
	priceList := self createPriceList.

	creditCard := Card initializeWithNumber:  '123654' owner: 'DBuceta' expiration: (October of: 2015). 	
	
	cart := Cart withCatalog: 1.! !
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 19:14:37' prior: 50781907!
test05CajeroNoPuedeCheckoutearTarjetaVencida

	| cajero priceList cart creditCard |
	
	priceList := self createPriceList.

	creditCard := Card initializeWithNumber:  '123654' owner: 'DBuceta' expiration: (October of: 2015). 	
	
	cart := Cart acceptingItemsOf: 2.! !
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 19:15:18'!
defaultCatalog

	| catalog |
	catalog := Dictionary new.
	
	! !
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 19:15:43' prior: 50781929!
defaultCatalog

	| catalog |
	catalog := Dictionary new.
	catalog add: 'Juans Book' -> 200.
	catalog add: 'Coso' -> 123.
	^catalog
	! !

!methodRemoval: CajeroTest #createPriceList stamp: 'g j 11/4/2019 19:15:54'!
createPriceList
	|priceList |
	priceList := Dictionary new.
	priceList add: 'A3322'->1010; add: 'A111'->300; add: 'A4222'->720; add: 'A3123'->900; yourself.
	^priceList .!

!methodRemoval: CajeroTest #createListOfBooks stamp: 'g j 11/4/2019 19:15:58'!
createListOfBooks
	
	^#('A3322', 'A111', 'A4222', 'A3123')!
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 19:16:37' prior: 50781918!
test05CajeroNoPuedeCheckoutearTarjetaVencida

	| cajero priceList cart creditCard |
	
	priceList := self createPriceList.

	creditCard := Card initializeWithNumber:  '123654' owner: 'DBuceta' expiration: (October of: 2015). 	
	
	cart := Cart acceptingItemsOf: self defaultCatalog.
	
	cajero := Cajero with: cart andCreditCard: creditCard.! !
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 19:18:23' prior: 50781953!
test05CajeroNoPuedeCheckoutearTarjetaVencida

	| cajero cart creditCard |

	creditCard := Card initializeWithNumber:  '123654' owner: 'DBuceta' expiration: (October of: 2015). 	
	
	cart := Cart acceptingItemsOf: self defaultCatalog.
	
	cajero := Cajero with: cart andCreditCard: creditCard.
	
	self should: [ cajero checkout.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero TarjetaVencida.! !
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 19:18:42' prior: 50781967!
test05CajeroNoPuedeCheckoutearTarjetaVencida

	| cajero cart creditCard |

	creditCard := Card initializeWithNumber:  '123654' owner: 'DBuzeta' expiration: (October of: 2015). 	
	
	cart := Cart acceptingItemsOf: self defaultCatalog.
	
	cajero := Cajero with: cart andCreditCard: creditCard.
	
	self should: [ cajero checkout.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero TarjetaVencida.! !
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 19:19:39' prior: 50781983!
test05CajeroNoPuedeCheckoutearTarjetaVencida

	| cajero cart creditCard |

	creditCard := Card initializeWithNumber:  '123654' owner: 'DBuzeta' expiration: (October of: 2015). 	
	
	cart := Cart acceptingItemsOf: self defaultCatalog.
	
	cart add: 'Juans Book'.
	
	cajero := Cajero with: cart andCreditCard: creditCard.
	
	self should: [ cajero checkout.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero TarjetaVencida.! !

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:19:40'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'g j 11/4/2019 19:20:05' prior: 50778190!
initializeWithNumber: aNumber owner: aName expiration: aGregorianMonthOfYear 
	self assertNumberIsValid: aNumber.
	self assertOwnerIsValid: aName.
	owner := aNumber .
	expiration := aGregorianMonthOfYear .
	creditNumber  := aNumber .
	^self.! !

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:20:14'!
ERROR!
!Cajero class methodsFor: 'instance creation' stamp: 'g j 11/4/2019 19:20:22'!
with: aCart andCreditCard: aCard 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aCart andCreditCard: aCard ! !
!Cajero class methodsFor: 'instance creation' stamp: 'g j 11/4/2019 19:20:37' prior: 50782033!
with: aCart andCreditCard: aCard 
	^self new initializeWith: aCart andCreditCard: aCard ! !

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:20:39'!
ERROR!

!classDefinition: #Cajero category: #TusLibros stamp: 'g j 11/4/2019 19:20:53'!
Object subclass: #Cajero
	instanceVariableNames: 'priceList items cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:22:08'!
ERROR!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:22:29'!
ERROR!
!Cajero methodsFor: 'as yet unclassified' stamp: 'g j 11/4/2019 19:24:50' prior: 50778093!
checkOutWithCardNumber: aStringOfCardNumber owner: aName expirationDate: aGregorianMonthOfYear
	
	
	| card |
	card := Card initializeWithNumber: aStringOfCardNumber owner: aName  expiration: aGregorianMonthOfYear .
	
	^self.! !

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:25:00'!
ERROR!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:25:00'!
ERROR!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:26:04'!
ERROR!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:26:04'!
ERROR!
!Cajero methodsFor: 'as yet unclassified' stamp: 'g j 11/4/2019 19:27:08' prior: 50782065!
checkOutWithCardNumber: aStringOfCardNumber owner: aName expirationDate: aGregorianMonthOfYear
	
	
	| card |
	card := Card initializeWithNumber: aStringOfCardNumber owner: aName  expiration: aGregorianMonthOfYear .
	
	^self.! !

!testRun: #CajeroTest #test01CajeroNeedsANonEmptyPriceList stamp: 'g j 11/4/2019 19:27:16'!
PASSED!

!testRun: #CajeroTest #test03NewCajeroNotHaveBooksToSell stamp: 'g j 11/4/2019 19:27:16'!
ERROR!

!testRun: #CajeroTest #test04CajeroRecognizeTheBooksAndQuantityOfTheGivenList stamp: 'g j 11/4/2019 19:27:16'!
ERROR!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:27:16'!
ERROR!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:27:22'!
ERROR!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:27:22'!
ERROR!
!Cajero methodsFor: 'as yet unclassified' stamp: 'g j 11/4/2019 19:27:40' prior: 50782089!
checkOutWithCardNumber: aStringOfCardNumber owner: aName expirationDate: aGregorianMonthOfYear
	
	
	| cardd |
	cardd := Card initializeWithNumber: aStringOfCardNumber owner: aName  expiration: aGregorianMonthOfYear .
	
	^self.! !
!Cajero methodsFor: 'as yet unclassified' stamp: 'g j 11/4/2019 19:27:46' prior: 50782120!
checkOutWithCardNumber: aStringOfCardNumber owner: aName expirationDate: aGregorianMonthOfYear
	
	
	| cardd |
	cardd := Card initializeWithNumber: aStringOfCardNumber owner: aName  expiration: aGregorianMonthOfYear .
	
	^self.! !

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:27:54'!
ERROR!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:27:54'!
ERROR!

!classDefinition: #Cajero category: #TusLibros stamp: 'g j 11/4/2019 19:27:58'!
Object subclass: #Cajero
	instanceVariableNames: 'priceList items cart card'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cajero methodsFor: '*Aconcagua-Extensions' stamp: 'g j 11/4/2019 19:27:58'!
initializeWith: aCart andCreditCard: aCard 
	self shouldBeImplemented.
	cart := aCart.
	card := aCard.! !
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 19:30:54' prior: 50781999!
test05CajeroNoPuedeCheckoutearTarjetaVencida

	| cajero cart creditCard sellBook |

	creditCard := Card initializeWithNumber:  '123654' owner: 'DBuzeta' expiration: (October of: 2015). 	
	
	cart := Cart acceptingItemsOf: self defaultCatalog.
	
	cart add: 'Juans Book'.
	
	sellBook := OrderedCollection new.
	
	cajero := Cajero with: cart andCreditCard: creditCard andHistoryBook: sellBook. 
	
	self should: [ cajero checkout.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero TarjetaVencida.! !

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:31:00'!
ERROR!
!Cajero class methodsFor: 'instance creation' stamp: 'g j 11/4/2019 19:31:06'!
with: aCart andCreditCard: aCard andHistoryBook: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aCart andCreditCard: aCard andHistoryBook: anOrderedCollection ! !
!Cajero class methodsFor: 'instance creation' stamp: 'g j 11/4/2019 19:31:32' prior: 50782183!
with: aCart andCreditCard: aCard andHistoryBook: aSellBook 
	^self new initializeWith: aCart andCreditCard: aCard andHistoryBook: aSellBook! !

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:31:36'!
ERROR!

!classDefinition: #Cajero category: #TusLibros stamp: 'g j 11/4/2019 19:31:41'!
Object subclass: #Cajero
	instanceVariableNames: 'priceList items cart card sellBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cajero methodsFor: 'initialization' stamp: 'g j 11/4/2019 19:31:41'!
initializeWith: aCart andCreditCard: aCard andHistoryBook: aSellBook 
	self shouldBeImplemented.
	cart := aCart.
	card := aCard.
	sellBook := aSellBook.! !
!Cajero methodsFor: 'initialization' stamp: 'g j 11/4/2019 19:31:47' prior: 50782213!
initializeWith: aCart andCreditCard: aCard andHistoryBook: aSellBook 
	cart := aCart.
	card := aCard.
	sellBook := aSellBook.! !

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:31:57'!
ERROR!
!Cajero class methodsFor: 'error messages' stamp: 'g j 11/4/2019 19:32:12'!
TarjetaVencida
	self shouldBeImplemented.! !
!Cajero class methodsFor: 'error messages' stamp: 'g j 11/4/2019 19:32:49' prior: 50782231!
TarjetaVencida
	^'Error la tarjeta esta vencida.'! !

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:32:53'!
ERROR!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:33:10'!
ERROR!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:33:16'!
ERROR!

!methodRemoval: Cajero #checkout stamp: 'g j 11/4/2019 19:33:52'!
checkout
	items isEmpty ifTrue: [^self error: Cajero ErrorCheckoutNeedsABook ].
	
	^self!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:33:57'!
ERROR!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:33:57'!
ERROR!
!Cajero methodsFor: 'casing' stamp: 'g j 11/4/2019 19:34:04'!
checkout
	self shouldBeImplemented.! !
!Cajero methodsFor: 'casing' stamp: 'g j 11/4/2019 19:34:41' prior: 50782262!
checkout
	self assertTarjetaNoVencida.
	! !

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:34:44'!
ERROR!
!Cajero methodsFor: 'binding' stamp: 'g j 11/4/2019 19:34:47'!
assertTarjetaNoVencida
	self shouldBeImplemented.! !
!Cajero methodsFor: 'binding' stamp: 'g j 11/4/2019 19:41:03' prior: 50782273!
assertTarjetaNoVencida
	card expiredOn: GregorianDate current.! !

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:41:07'!
ERROR!
!Cajero methodsFor: 'binding' stamp: 'g j 11/4/2019 19:41:45' prior: 50782278!
assertTarjetaNoVencida
	card expiredOn: GregorianMonthOfYear current.! !

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:41:52'!
ERROR!
!Card methodsFor: 'as yet unclassified' stamp: 'g j 11/4/2019 19:42:01'!
expiredOn: aGregorianMonthOfYear 
	self shouldBeImplemented.! !
!Card methodsFor: 'as yet unclassified' stamp: 'g j 11/4/2019 19:42:55' prior: 50782294!
expiredOn: aDateToCompare 
	^ expiration < aDateToCompare.! !

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:43:16'!
FAILURE!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:43:26'!
FAILURE!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:44:08'!
FAILURE!
!Cajero methodsFor: 'binding' stamp: 'g j 11/4/2019 19:45:02' prior: 50782286!
assertTarjetaNoVencida
	(card expiredOn: GregorianMonthOfYear current) ifTrue:[^self error: Cajero TarjetaVencida].! !

!testRun: #CajeroTest #test01CajeroNeedsANonEmptyPriceList stamp: 'g j 11/4/2019 19:45:03'!
PASSED!

!testRun: #CajeroTest #test03NewCajeroNotHaveBooksToSell stamp: 'g j 11/4/2019 19:45:03'!
ERROR!

!testRun: #CajeroTest #test04CajeroRecognizeTheBooksAndQuantityOfTheGivenList stamp: 'g j 11/4/2019 19:45:03'!
ERROR!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:45:03'!
PASSED!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:45:13'!
PASSED!

!testRun: #CajeroTest #test01CajeroNeedsANonEmptyPriceList stamp: 'g j 11/4/2019 19:45:13'!
PASSED!

!testRun: #CajeroTest #test03NewCajeroNotHaveBooksToSell stamp: 'g j 11/4/2019 19:45:13'!
ERROR!

!testRun: #CajeroTest #test04CajeroRecognizeTheBooksAndQuantityOfTheGivenList stamp: 'g j 11/4/2019 19:45:13'!
ERROR!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:45:13'!
PASSED!

!classDefinition: #CajeroTest category: #TusLibros stamp: 'g j 11/4/2019 19:46:59'!
TestCase subclass: #CajeroTest
	instanceVariableNames: 'carty'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CajeroTest category: #TusLibros stamp: 'g j 11/4/2019 19:47:00'!
TestCase subclass: #CajeroTest
	instanceVariableNames: 'carty sellBooky'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 19:46:58'!
setUp
	
	carty := Cart acceptingItemsOf: self defaultCatalog.
		
	sellBooky := OrderedCollection new.
	! !
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 19:49:14' prior: 50777850!
test03NewCajeroNotHaveBooksToSell

	| cajero card |
	
	card := Card initializeWithNumber: '112211' owner: 'Ttt' expiration: (October of: 2030).
	
	cajero with: carty andCreditCard: card andHistoryBook: sellBooky. 
	self assert: cajero isEmpty.
				! !
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 19:49:56' prior: 50782370!
test03NewCajeroNotHaveBooksToSell

	| cajero card |
	
	card := Card initializeWithNumber: '112211' owner: 'Ttt' expiration: (October of: 2030).
	
	cajero := Cajero with: carty andCreditCard: card andHistoryBook: sellBooky. 
	self assert: cajero isEmpty.
				! !

!testRun: #CajeroTest #test03NewCajeroNotHaveBooksToSell stamp: 'g j 11/4/2019 19:50:16'!
ERROR!

!testRun: #CajeroTest #test03NewCajeroNotHaveBooksToSell stamp: 'g j 11/4/2019 19:50:16'!
ERROR!
!Cajero methodsFor: 'casing' stamp: 'g j 11/4/2019 19:56:57'!
checkoutOnADate: aDate
	self assertTarjetaNoVencida: aDate.
	! !
!Cajero methodsFor: 'binding' stamp: 'g j 11/4/2019 19:57:54'!
assertTarjetaNoVencida: aDate
	(card expiredOn: aDate) ifTrue: [^self error: Cajero TarjetaVencida].! !

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:58:01'!
PASSED!

!testRun: #CajeroTest #test01CajeroNeedsANonEmptyPriceList stamp: 'g j 11/4/2019 19:58:01'!
PASSED!

!testRun: #CajeroTest #test03NewCajeroNotHaveBooksToSell stamp: 'g j 11/4/2019 19:58:01'!
ERROR!

!testRun: #CajeroTest #test04CajeroRecognizeTheBooksAndQuantityOfTheGivenList stamp: 'g j 11/4/2019 19:58:01'!
ERROR!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:58:01'!
PASSED!
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 19:59:06' prior: 50782161!
test05CajeroNoPuedeCheckoutearTarjetaVencida

	| cajero cart creditCard sellBook |

	creditCard := Card initializeWithNumber:  '123654' owner: 'DBuzeta' expiration: (October of: 2015). 	
	
	cart := Cart acceptingItemsOf: self defaultCatalog.
	
	cart add: 'Juans Book'.
	
	sellBook := OrderedCollection new.
	
	cajero := Cajero with: cart andCreditCard: creditCard andHistoryBook: sellBook. 
	
	self should: [ cajero checkoutOnADate: (October of: 2025)]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero TarjetaVencida.! !

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:59:06'!
PASSED!

!testRun: #CajeroTest #test01CajeroNeedsANonEmptyPriceList stamp: 'g j 11/4/2019 19:59:06'!
PASSED!

!testRun: #CajeroTest #test03NewCajeroNotHaveBooksToSell stamp: 'g j 11/4/2019 19:59:06'!
ERROR!

!testRun: #CajeroTest #test04CajeroRecognizeTheBooksAndQuantityOfTheGivenList stamp: 'g j 11/4/2019 19:59:06'!
ERROR!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 19:59:06'!
PASSED!

GregorianDate!

GregorianDate now!

GregorianDate date !

Date today !
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 20:03:06' prior: 50782425!
test05CajeroNoPuedeCheckoutearTarjetaVencida

	| cajero cart creditCard sellBook |

	creditCard := Card initializeWithNumber:  '123654' owner: 'DBuzeta' expiration: (October of: 2015). 	
	
	cart := Cart acceptingItemsOf: self defaultCatalog.
	
	cart add: 'Juans Book'.
	
	sellBook := OrderedCollection new.
	
	cajero := Cajero with: cart andCreditCard: creditCard andHistoryBook: sellBook. 
	
	self should: [ cajero checkoutOnADate: (Date newDay: 12 month: #July year: 2999 )]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero TarjetaVencida.! !

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 20:03:07'!
ERROR!
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 20:08:31' prior: 50782464!
test05CajeroNoPuedeCheckoutearTarjetaVencida

	| cajero cart creditCard sellBook |

	creditCard := Card initializeWithNumber:  '123654' owner: 'DBuzeta' expiration: (October of: 2015). 	
	
	cart := Cart acceptingItemsOf: self defaultCatalog.
	
	cart add: 'Juans Book'.
	
	sellBook := OrderedCollection new.
	
	cajero := Cajero with: cart andCreditCard: creditCard andHistoryBook: sellBook. 
	
	self should: [ cajero checkoutOnADate: (FixedGregorianDate year: 2020 month: October dayNumber: 22)]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero TarjetaVencida.! !

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 20:08:34'!
ERROR!

FixedGregorianDate year: 2020 month: October dayNumber: 22!

FixedGregorianDate !

FixedGregorianDate now !
!Card methodsFor: 'as yet unclassified' stamp: 'g j 11/4/2019 20:13:30' prior: 50782299!
expiredOn: aDateToCompare 
	^ expiration < aDateToCompare monthOfYear.! !

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 20:13:36'!
ERROR!

(FixedGregorianDate year: 2020 month: October dayNumber: 22)!
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 20:15:31' prior: 50782488!
test05CajeroNoPuedeCheckoutearTarjetaVencida

	| cajero cart creditCard sellBook |

	creditCard := Card initializeWithNumber:  '123654' owner: 'DBuzeta' expiration: (October of: 2015). 	
	
	cart := Cart acceptingItemsOf: self defaultCatalog.
	
	cart add: 'Juans Book'.
	
	sellBook := OrderedCollection new.
	
	cajero := Cajero with: cart andCreditCard: creditCard andHistoryBook: sellBook. 
	
	self should: [ cajero checkoutOnADate: (FixedGregorianDate year: 2020 monthNumber: 2 dayNumber: 22)]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero TarjetaVencida.! !

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 20:15:37'!
ERROR!
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 20:16:31' prior: 50782527!
test05CajeroNoPuedeCheckoutearTarjetaVencida

	| cajero cart creditCard sellBook |

	creditCard := Card initializeWithNumber:  '123654' owner: 'DBuzeta' expiration: (October of: 2015). 	
	
	cart := Cart acceptingItemsOf: self defaultCatalog.
	
	cart add: 'Juans Book'.
	
	sellBook := OrderedCollection new.
	
	cajero := Cajero with: cart andCreditCard: creditCard andHistoryBook: sellBook. 
	
	self should: [ cajero checkoutOnADate: (FixedGregorianDate monthOfYear: (October of: 2020) dayNumber: 22)]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero TarjetaVencida.! !

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 20:16:32'!
PASSED!

!testRun: #CajeroTest #test01CajeroNeedsANonEmptyPriceList stamp: 'g j 11/4/2019 20:16:32'!
PASSED!

!testRun: #CajeroTest #test03NewCajeroNotHaveBooksToSell stamp: 'g j 11/4/2019 20:16:32'!
ERROR!

!testRun: #CajeroTest #test04CajeroRecognizeTheBooksAndQuantityOfTheGivenList stamp: 'g j 11/4/2019 20:16:32'!
ERROR!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 20:16:32'!
PASSED!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 20:16:59'!
PASSED!

!testRun: #CajeroTest #test01CajeroNeedsANonEmptyPriceList stamp: 'g j 11/4/2019 20:16:59'!
PASSED!

!testRun: #CajeroTest #test03NewCajeroNotHaveBooksToSell stamp: 'g j 11/4/2019 20:16:59'!
ERROR!

!testRun: #CajeroTest #test04CajeroRecognizeTheBooksAndQuantityOfTheGivenList stamp: 'g j 11/4/2019 20:16:59'!
ERROR!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 20:16:59'!
PASSED!

!testRun: #CajeroTest #test03NewCajeroNotHaveBooksToSell stamp: 'g j 11/4/2019 20:17:18'!
ERROR!

!testRun: #CajeroTest #test03NewCajeroNotHaveBooksToSell stamp: 'g j 11/4/2019 20:17:32'!
ERROR!

!methodRemoval: CajeroTest #test03NewCajeroNotHaveBooksToSell stamp: 'g j 11/4/2019 20:17:57'!
test03NewCajeroNotHaveBooksToSell

	| cajero card |
	
	card := Card initializeWithNumber: '112211' owner: 'Ttt' expiration: (October of: 2030).
	
	cajero := Cajero with: carty andCreditCard: card andHistoryBook: sellBooky. 
	self assert: cajero isEmpty.
				!

!testRun: #CajeroTest #test04CajeroRecognizeTheBooksAndQuantityOfTheGivenList stamp: 'g j 11/4/2019 20:18:01'!
ERROR!

!testRun: #CajeroTest #test04CajeroRecognizeTheBooksAndQuantityOfTheGivenList stamp: 'g j 11/4/2019 20:18:01'!
ERROR!
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 20:19:28' prior: 50782552!
test05CajeroNoPuedeCheckoutearTarjetaVencida

	| cajero creditCard |

	creditCard := Card initializeWithNumber:  '123654' owner: 'DBuzeta' expiration: (October of: 2015). 	
	
	carty add: 'Juans Book'.
	
	
	cajero := Cajero with: carty andCreditCard: creditCard andHistoryBook: sellBooky. 
	
	self should: [ cajero checkoutOnADate: (FixedGregorianDate monthOfYear: (October of: 2020) dayNumber: 22)]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero TarjetaVencida.! !

!classDefinition: #CajeroTest category: #TusLibros stamp: 'g j 11/4/2019 20:19:43'!
TestCase subclass: #CajeroTest
	instanceVariableNames: 'carty sellBooky cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CajeroTest category: #TusLibros stamp: 'g j 11/4/2019 20:19:44'!
TestCase subclass: #CajeroTest
	instanceVariableNames: 'carty sellBooky cart sellBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 20:19:41' prior: 50782364!
setUp
	
	cart := Cart acceptingItemsOf: self defaultCatalog.
		
	sellBook := OrderedCollection new.
	! !

TestCase subclass: #CajeroTest
	instanceVariableNames: 'cart sellBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 20:20:20' prior: 50782632!
test05CajeroNoPuedeCheckoutearTarjetaVencida

	| cajero creditCard |

	creditCard := Card initializeWithNumber:  '123654' owner: 'DBuzeta' expiration: (October of: 2015). 	
	
	carty add: 'Juans Book'.
	
	
	cajero := Cajero with: cart andCreditCard: creditCard andHistoryBook: sellBook. 
	
	self should: [ cajero checkoutOnADate: (FixedGregorianDate monthOfYear: (October of: 2020) dayNumber: 22)]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero TarjetaVencida.! !

TestCase subclass: #CajeroTest
	instanceVariableNames: 'cart sellBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 20:20:50' prior: 50782676!
test05CajeroNoPuedeCheckoutearTarjetaVencida

	| cajero creditCard |

	creditCard := Card initializeWithNumber:  '123654' owner: 'DBuzeta' expiration: (October of: 2015). 	
	
	cart add: 'Juans Book'.
	
	
	cajero := Cajero with: cart andCreditCard: creditCard andHistoryBook: sellBook. 
	
	self should: [ cajero checkoutOnADate: (FixedGregorianDate monthOfYear: (October of: 2020) dayNumber: 22)]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero TarjetaVencida.! !

TestCase subclass: #CajeroTest
	instanceVariableNames: 'cart sellBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 20:24:34'!
test02CajeroCanNotCheckoutWithEmptyCart

	| cajero creditCard |
	
	creditCard := Card initializeWithNumber: '123123' owner: 'ggg' expiration: (December of: 2040).
	
	cajero := Cajero with: cart andCreditCard: creditCard andHistoryBook: sellBook.
	self should: [cajero checkoutOnADate: 14]
	
				! !
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 20:25:42' prior: 50782720!
test02CajeroCanNotCheckoutWithEmptyCart

	| cajero creditCard |
	
	creditCard := Card initializeWithNumber: '123123' owner: 'ggg' expiration: (December of: 2040).
	
	cajero := Cajero with: cart andCreditCard: creditCard andHistoryBook: sellBook.
	self should: [cajero checkoutOnADate: (FixedGregorianDate monthOfYear: (October of: 2020) dayNumber: 22)]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero CarritoVacio.
	
				! !

!testRun: #CajeroTest #test02CajeroCanNotCheckoutWithEmptyCart stamp: 'g j 11/4/2019 20:25:56'!
ERROR!
!Cajero class methodsFor: 'as yet unclassified' stamp: 'g j 11/4/2019 20:26:04'!
CarritoVacio
	self shouldBeImplemented.! !
!Cajero class methodsFor: 'as yet unclassified' stamp: 'g j 11/4/2019 20:26:34' prior: 50782752!
CarritoVacio
	^'El carrito esta vacio.'! !

!testRun: #CajeroTest #test02CajeroCanNotCheckoutWithEmptyCart stamp: 'g j 11/4/2019 20:26:41'!
FAILURE!
!Cajero methodsFor: 'casing' stamp: 'g j 11/4/2019 20:27:43' prior: 50782398!
checkoutOnADate: aDate
	self assertCarritoNoVacio.
	self assertTarjetaNoVencida: aDate.
	! !

!methodRemoval: Cajero #checkout stamp: 'g j 11/4/2019 20:27:52'!
checkout
	self assertTarjetaNoVencida.
	!

!testRun: #CajeroTest #test02CajeroCanNotCheckoutWithEmptyCart stamp: 'g j 11/4/2019 20:28:09'!
ERROR!
!Cajero methodsFor: 'as yet unclassified' stamp: 'g j 11/4/2019 20:28:20'!
assertCarritoNoVacio
	self shouldBeImplemented.! !
!Cajero methodsFor: 'as yet unclassified' stamp: 'g j 11/4/2019 20:28:36' prior: 50782777!
assertCarritoNoVacio
	cart isEmpty ifTrue: [self error: Cajero CarritoVacio.]! !

!testRun: #CajeroTest #test02CajeroCanNotCheckoutWithEmptyCart stamp: 'g j 11/4/2019 20:28:50'!
PASSED!

!testRun: #CajeroTest #test01CajeroNeedsANonEmptyPriceList stamp: 'g j 11/4/2019 20:28:50'!
PASSED!

!testRun: #CajeroTest #test02CajeroCanNotCheckoutWithEmptyCart stamp: 'g j 11/4/2019 20:28:50'!
PASSED!

!testRun: #CajeroTest #test04CajeroRecognizeTheBooksAndQuantityOfTheGivenList stamp: 'g j 11/4/2019 20:28:50'!
ERROR!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 20:28:50'!
PASSED!

!testRun: #CajeroTest #test04CajeroRecognizeTheBooksAndQuantityOfTheGivenList stamp: 'g j 11/4/2019 20:28:50'!
ERROR!

!methodRemoval: CajeroTest #test04CajeroRecognizeTheBooksAndQuantityOfTheGivenList stamp: 'g j 11/4/2019 20:29:00'!
test04CajeroRecognizeTheBooksAndQuantityOfTheGivenList

	| cajero priceList |
	
	priceList := self createPriceList.
	cajero := Cajero new initializeWithPriceList: priceList.
	cajero addItems: self createListOfBooks.
	self deny: cajero isEmpty.
	self assert: cajero itemCount = ((self createListOfBooks)size).
	
				!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 20:29:04'!
PASSED!

!testRun: #CajeroTest #test01CajeroNeedsANonEmptyPriceList stamp: 'g j 11/4/2019 20:29:04'!
PASSED!

!testRun: #CajeroTest #test02CajeroCanNotCheckoutWithEmptyCart stamp: 'g j 11/4/2019 20:29:04'!
PASSED!

!testRun: #CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 20:29:04'!
PASSED!
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 20:29:22'!
test03CajeroNoPuedeCheckoutearTarjetaVencida

	| cajero creditCard |

	creditCard := Card initializeWithNumber:  '123654' owner: 'DBuzeta' expiration: (October of: 2015). 	
	
	cart add: 'Juans Book'.
	
	
	cajero := Cajero with: cart andCreditCard: creditCard andHistoryBook: sellBook. 
	
	self should: [ cajero checkoutOnADate: (FixedGregorianDate monthOfYear: (October of: 2020) dayNumber: 22)]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero TarjetaVencida.! !

!methodRemoval: CajeroTest #test05CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 20:29:26'!
test05CajeroNoPuedeCheckoutearTarjetaVencida

	| cajero creditCard |

	creditCard := Card initializeWithNumber:  '123654' owner: 'DBuzeta' expiration: (October of: 2015). 	
	
	cart add: 'Juans Book'.
	
	
	cajero := Cajero with: cart andCreditCard: creditCard andHistoryBook: sellBook. 
	
	self should: [ cajero checkoutOnADate: (FixedGregorianDate monthOfYear: (October of: 2020) dayNumber: 22)]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cajero TarjetaVencida.!

!methodRemoval: CajeroTest #test01CajeroNeedsANonEmptyPriceList stamp: 'g j 11/4/2019 20:29:38'!
test01CajeroNeedsANonEmptyPriceList

	| cajero priceList |
	
	priceList := Dictionary new..
	self 
		should: [cajero := Cajero new initializeWithPriceList: priceList.]
			raise: Error
				withMessageText: Cajero ErrorPriceListNeeded.
				!
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 20:35:00'!
test04Cajeroxxx

	| cajero creditCard valorVenta |
	
	cart add: 'Juans Book'.
	
	creditCard := Card initializeWithNumber: '123123' owner: 'ggg' expiration: (December of: 2040).
	
	cajero := Cajero with: cart andCreditCard: creditCard andHistoryBook: sellBook.
	valorVenta := cajero checkoutOnADate: (FixedGregorianDate monthOfYear: (October of: 2020) dayNumber: 22).
	
	self assert: 200 equals: valorVenta. 
	
				! !

!testRun: #CajeroTest #test04Cajeroxxx stamp: 'g j 11/4/2019 20:35:11'!
FAILURE!
!Cajero methodsFor: 'casing' stamp: 'g j 11/4/2019 20:35:55' prior: 50782765!
checkoutOnADate: aDate
	self assertCarritoNoVacio.
	self assertTarjetaNoVencida: aDate.
	^cart montoTotal.
	! !

!testRun: #CajeroTest #test04Cajeroxxx stamp: 'g j 11/4/2019 20:36:03'!
PASSED!

!testRun: #CajeroTest #test02CajeroCanNotCheckoutWithEmptyCart stamp: 'g j 11/4/2019 20:36:03'!
PASSED!

!testRun: #CajeroTest #test03CajeroNoPuedeCheckoutearTarjetaVencida stamp: 'g j 11/4/2019 20:36:03'!
PASSED!

!testRun: #CajeroTest #test04Cajeroxxx stamp: 'g j 11/4/2019 20:36:03'!
PASSED!
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 20:38:36'!
test05CajeroAñadeNuevoRegistroALibroDeVentas

	| cajero creditCard valorVenta |
	
	cart add: 'Juans Book'.
	
	creditCard := Card initializeWithNumber: '123123' owner: 'ggg' expiration: (December of: 2040).
	
	self assert: sellBook isEmpty.
	
	cajero := Cajero with: cart andCreditCard: creditCard andHistoryBook: sellBook.
	valorVenta := cajero checkoutOnADate: (FixedGregorianDate monthOfYear: (October of: 2020) dayNumber: 22).
	
	self assert: 1 equals: sellBook size.
	
				! !
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 20:38:55' prior: 50782918!
test05CajeroAñadeNuevoRegistroALibroDeVentas

	| cajero creditCard |
	
	cart add: 'Juans Book'.
	
	creditCard := Card initializeWithNumber: '123123' owner: 'ggg' expiration: (December of: 2040).
	
	self assert: sellBook isEmpty.
	
	cajero := Cajero with: cart andCreditCard: creditCard andHistoryBook: sellBook.
	cajero checkoutOnADate: (FixedGregorianDate monthOfYear: (October of: 2020) dayNumber: 22).
	
	self assert: 1 equals: sellBook size.
	
				! !

!testRun: #CajeroTest #test05CajeroAñadeNuevoRegistroALibroDeVentas stamp: 'g j 11/4/2019 20:38:58'!
FAILURE!
!CajeroTest methodsFor: 'tests' stamp: 'g j 11/4/2019 20:46:38'!
test04CajeroVendeLibroYElMontoCobradoEsElPrecioDelLibro

	| cajero creditCard valorVenta |
	
	cart add: 'Juans Book'.
	
	creditCard := Card initializeWithNumber: '123123' owner: 'ggg' expiration: (December of: 2040).
	
	cajero := Cajero with: cart andCreditCard: creditCard andHistoryBook: sellBook.
	valorVenta := cajero checkoutOnADate: (FixedGregorianDate monthOfYear: (October of: 2020) dayNumber: 22).
	
	self assert: 200 equals: valorVenta. 
	
				! !

!methodRemoval: CajeroTest #test04Cajeroxxx stamp: 'g j 11/4/2019 20:46:49'!
test04Cajeroxxx

	| cajero creditCard valorVenta |
	
	cart add: 'Juans Book'.
	
	creditCard := Card initializeWithNumber: '123123' owner: 'ggg' expiration: (December of: 2040).
	
	cajero := Cajero with: cart andCreditCard: creditCard andHistoryBook: sellBook.
	valorVenta := cajero checkoutOnADate: (FixedGregorianDate monthOfYear: (October of: 2020) dayNumber: 22).
	
	self assert: 200 equals: valorVenta. 
	
				!

a := OrderedCollection new.!

a add:1.!

a add:1!

a add:1.!

a !

a := OrderedCollection new.!

a occurrencesOf:1.!

a add:1.!

a add:1.!

a add:1.!

a add:1.!

a occurrencesOf:1.!

!testRun: #CajeroTest #test05CajeroAñadeNuevoRegistroALibroDeVentas stamp: 'g j 11/4/2019 20:49:48'!
FAILURE!

----QUIT----(4 November 2019 21:10:46) CuisUniversity-3938.image priorSource: 14276672!

----STARTUP---- (7 November 2019 17:23:05) as /home/gjimenez/Descargas/linux64/CuisUniversity-3938.image!


!classRemoval: #Cart stamp: 'g j 11/7/2019 17:23:14'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items montoTotal'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Card stamp: 'g j 11/7/2019 17:23:15'!
Object subclass: #Card
	instanceVariableNames: 'creditNumber expiration owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cajero stamp: 'g j 11/7/2019 17:23:16'!
Object subclass: #Cajero
	instanceVariableNames: 'priceList items cart card sellBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'g j 11/7/2019 17:23:16'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CardTest stamp: 'g j 11/7/2019 17:23:17'!
TestCase subclass: #CardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CajeroTest stamp: 'g j 11/7/2019 17:23:17'!
TestCase subclass: #CajeroTest
	instanceVariableNames: 'carty sellBooky cart sellBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/gjimenez/Descargas/linux64/TusLibros.st----!

TestCase subclass: #CajeroTest
	instanceVariableNames: 'carty  cart sellBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CajeroTest category: #TusLibros stamp: 'g j 11/7/2019 18:21:50'!
TestCase subclass: #CajeroTest
	instanceVariableNames: 'carty cart sellBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #CajeroTest
	instanceVariableNames: 'cart sellBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CajeroTest category: #TusLibros stamp: 'g j 11/7/2019 18:21:54'!
TestCase subclass: #CajeroTest
	instanceVariableNames: 'cart sellBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorSimulator stamp: 'g j 11/7/2019 19:04:38'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'g j 11/7/2019 19:04:39'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items montoTotal'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Card stamp: 'g j 11/7/2019 19:04:39'!
Object subclass: #Card
	instanceVariableNames: 'creditNumber expiration owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cajero stamp: 'g j 11/7/2019 19:04:40'!
Object subclass: #Cajero
	instanceVariableNames: 'cart card merchantProcessorSimulator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'g j 11/7/2019 19:04:40'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CardTest stamp: 'g j 11/7/2019 19:04:41'!
TestCase subclass: #CardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CajeroTest stamp: 'g j 11/7/2019 19:04:41'!
TestCase subclass: #CajeroTest
	instanceVariableNames: 'cart sellBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/gjimenez/Descargas/linux64/TusLibros-33.st----!

Object subclass: #InterfazRest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfazRest category: #TusLibros stamp: 'g j 11/7/2019 19:05:43'!
Object subclass: #InterfazRest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #InterfazRestTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfazRestTest category: #TusLibros stamp: 'g j 11/7/2019 19:06:03'!
TestCase subclass: #InterfazRestTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'nil' stamp: 'g j 11/7/2019 19:10:26'!
test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 19:15:03' prior: 50784304!
test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts

	| newCartId xxx |
	xxx := XXX new.
	
	newCartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	self assert: xxx listCartWithId: newCartId isEmpty.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 19:15:22' prior: 50784309!
test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts

	| newCartId xxx |
	xxx := XXX new.
	
	newCartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	self assert: (xxx listCartWithId: newCartId isEmpty).! !
!XXXTest methodsFor: 'nil' stamp: 'g j 11/7/2019 19:15:45'!
test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts

	| newCartId xxx |
	xxx := XXX new.
	
	newCartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	self assert: (xxx listCartWithId: newCartId isEmpty).! !

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/7/2019 19:15:47'!
ERROR!

!methodRemoval: XXX #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/7/2019 19:15:56'!
test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts

	| newCartId xxx |
	xxx := XXX new.
	
	newCartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	self assert: (xxx listCartWithId: newCartId isEmpty).!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/7/2019 19:16:03'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 19:16:11'!
createCartForId: aSmallInteger withPassword: aString 
	self shouldBeImplemented.! !

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/7/2019 19:17:14'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 19:19:51' prior: 50784354!
createCartForId: aSmallInteger withPassword: aString 
	
	
	^1! !

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/7/2019 19:20:12'!
ERROR!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 19:20:34' prior: 50784328!
test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts

	| newCartId xxx |
	xxx := XXX new.
	
	newCartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	self assert: (xxx listCartWithId: newCartId) isEmpty.! !

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/7/2019 19:20:40'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 19:20:45'!
listCartWithId: aSmallInteger 
	self shouldBeImplemented.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 19:21:06' prior: 50784385!
listCartWithId: aSmallInteger 
	| libros |
	libros := OrderedCollection new.
	
	^libros.! !

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/7/2019 19:21:21'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/7/2019 19:21:21'!
PASSED!

!classDefinition: #XXXTest category: #TusLibros stamp: 'g j 11/7/2019 19:22:03'!
TestCase subclass: #XXXTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 19:22:02'!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 19:27:50'!
test02SeAgregaUnLibroAlCarritoYAlListarloAparece

	| newCartId xxx libros |
	xxx := XXX new.
	
	newCartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: newCartId withISBN: testObjectsFactory itemSellByTheStore .
	
	libros := (xxx listCartWithId: newCartId).
	
	
	self assert: 1 equals: libros size.
	self assert: libros includes: testObjectsFactory itemSellByTheStore.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 19:28:30' prior: 50784415!
test02SeAgregaUnLibroAlCarritoYAlListarloAparece

	| newCartId xxx libros |
	xxx := XXX new.
	
	newCartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: newCartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	libros := (xxx listCartWithId: newCartId).
	
	
	self assert: 1 equals: libros size.
	self assert: libros includes: testObjectsFactory itemSellByTheStore.! !

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/7/2019 19:28:40'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 19:28:50'!
addToCartWithId: aSmallInteger withISBN: aString withQuantity: aSmallInteger3 
	self shouldBeImplemented.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 19:30:59' prior: 50784450!
addToCartWithId: aCartId withISBN: anISBN withQuantity: aQuantity 
	! !

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/7/2019 19:37:21'!
FAILURE!

!classDefinition: #XXX category: #TusLibros stamp: 'g j 11/7/2019 19:39:58'!
Object subclass: #XXX
	instanceVariableNames: 'catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XXX category: #TusLibros stamp: 'g j 11/7/2019 19:39:59'!
Object subclass: #XXX
	instanceVariableNames: 'catalog carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 19:39:52' prior: 50784363!
createCartForId: aSmallInteger withPassword: aString 
	
	| newCart |
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: 1-> newCart.
	
	^1.! !

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/7/2019 19:40:13'!
ERROR!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 19:41:58' prior: 50784431!
test02SeAgregaUnLibroAlCarritoYAlListarloAparece

	| newCartId xxx libros |
	xxx := XXX withCatalog: testObjectsFactory .
	
	newCartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: newCartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	libros := (xxx listCartWithId: newCartId).
	
	
	self assert: 1 equals: libros size.
	self assert: libros includes: testObjectsFactory itemSellByTheStore.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 19:42:17' prior: 50784490!
test02SeAgregaUnLibroAlCarritoYAlListarloAparece

	| newCartId xxx libros |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	newCartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: newCartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	libros := (xxx listCartWithId: newCartId).
	
	
	self assert: 1 equals: libros size.
	self assert: libros includes: testObjectsFactory itemSellByTheStore.! !

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/7/2019 19:42:17'!
ERROR!
!XXX class methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 19:42:24'!
withCatalog: aDictionary 
	self shouldBeImplemented.! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 19:42:46' prior: 50784528!
withCatalog: aDictionary 
	^self new initializeWithCatalog: aDictionary.! !

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/7/2019 19:42:49'!
ERROR!

!classDefinition: #XXX category: #TusLibros stamp: 'g j 11/7/2019 19:42:55'!
Object subclass: #XXX
	instanceVariableNames: 'catalog carts dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'initialization' stamp: 'g j 11/7/2019 19:42:55'!
initializeWithCatalog: aDictionary 
	self shouldBeImplemented.
	dictionary := aDictionary.! !
!XXX methodsFor: 'initialization' stamp: 'g j 11/7/2019 19:43:31' prior: 50784548!
initializeWithCatalog: aCatalog 
	catalog := aCatalog.
	carts := Dictionary new.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 19:46:33' prior: 50784457!
addToCartWithId: aCartId withISBN: anISBN withQuantity: aQuantity 
	
	| cartToAdd |
	cartToAdd := carts at: aCartId ifAbsent: [].
	
	cartToAdd add: aQuantity of: anISBN.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 19:51:57' prior: 50784390!
listCartWithId: aCartId
	| libros |
	libros := OrderedCollection new.
	
	^libros.! !
!Cart methodsFor: 'initialization' stamp: 'g j 11/7/2019 20:03:53' prior: 50783765!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart class methodsFor: 'instance creation' stamp: 'g j 11/7/2019 20:05:31'!
acceptingItemsOf: aCatalog withId: anId 

	^self new initializeAcceptingItemsOf: aCatalog ! !

!methodRemoval: Cart class #acceptingItemsOf: stamp: 'g j 11/7/2019 20:05:31'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'g j 11/7/2019 20:07:10' prior: 50784247!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog withId: 1! !

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/7/2019 20:07:21'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'g j 11/7/2019 20:07:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'g j 11/7/2019 20:07:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/7/2019 20:07:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'g j 11/7/2019 20:07:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'g j 11/7/2019 20:07:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'g j 11/7/2019 20:07:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'g j 11/7/2019 20:07:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'g j 11/7/2019 20:07:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'g j 11/7/2019 20:07:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'g j 11/7/2019 20:07:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'g j 11/7/2019 20:07:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'g j 11/7/2019 20:07:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'g j 11/7/2019 20:07:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'g j 11/7/2019 20:07:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'g j 11/7/2019 20:07:24'!
PASSED!
!Cart methodsFor: 'initialization' stamp: 'g j 11/7/2019 20:08:23'!
initializeAcceptingItemsOf: aCatalog withId: anId 

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:08:23' prior: 50784581!
acceptingItemsOf: aCatalog withId: anId 

	^self new initializeAcceptingItemsOf: aCatalog withId: 1 ! !

!methodRemoval: Cart #initializeAcceptingItemsOf: stamp: 'g j 11/7/2019 20:08:23'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.!

!classDefinition: #Cart category: #TusLibros stamp: 'g j 11/7/2019 20:08:35'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'g j 11/7/2019 20:08:32' prior: 50784649!
initializeAcceptingItemsOf: aCatalog withId: anId 

	catalog := aCatalog.
	items := OrderedCollection new.
	id := anId.! !

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'g j 11/7/2019 20:08:40'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'g j 11/7/2019 20:08:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'g j 11/7/2019 20:08:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/7/2019 20:08:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'g j 11/7/2019 20:08:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'g j 11/7/2019 20:08:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'g j 11/7/2019 20:08:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'g j 11/7/2019 20:08:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'g j 11/7/2019 20:08:40'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'g j 11/7/2019 20:08:43'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'g j 11/7/2019 20:08:43'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'g j 11/7/2019 20:08:43'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'g j 11/7/2019 20:08:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'g j 11/7/2019 20:08:43'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'g j 11/7/2019 20:08:43'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'g j 11/7/2019 20:08:43'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/7/2019 20:09:08'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:09:44' prior: 50784479!
createCartForId: aCartId withPassword: aString 
	
	| newCart |
	newCart := Cart acceptingItemsOf: catalog withId: aCartId.
	
	carts add: 1-> newCart.
	
	^1.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:10:40' prior: 50784738!
createCartForId: aCartId withPassword: aString 
	
	| newCart |
	newCart := Cart acceptingItemsOf: catalog withId: aCartId.
	
	carts add: newCart.
	
	^newCart id.! !

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/7/2019 20:10:45'!
ERROR!
!XXX methodsFor: 'initialization' stamp: 'g j 11/7/2019 20:11:04' prior: 50784554!
initializeWithCatalog: aCatalog 
	catalog := aCatalog.
	carts := OrderedCollection new.! !

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/7/2019 20:11:08'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:11:16'!
id
	self shouldBeImplemented.
	^id! !
!Cart methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:11:19' prior: 50784767!
id
	^id! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:13:44' prior: 50784569!
listCartWithId: aCartId
	| libros actualCart |
	actualCart := carts detect: [:aCart | aCart id = aCartId ] ifNone: [].

	libros := actualCart listBooks.
	
	^libros.! !

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/7/2019 20:13:52'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:13:59'!
listBooks
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:24:12' prior: 50784786!
listBooks
	| listedBooks |
	listedBooks = OrderedCollection new.
	items do: [:anItem | 
		(listedBooks allSatisfy: [
									:aBook | aBook first ~=anItem]) ifTrue: [
			 																		listedBooks add:(anItem @ (items occurrencesOf: anItem))]].
																			
	^listedBooks.! !

!classRemoval: #XXX stamp: 'g j 11/7/2019 20:24:41'!
Object subclass: #XXX
	instanceVariableNames: 'catalog carts dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----STARTUP---- (7 November 2019 20:25:10) as /home/gjimenez/Descargas/linux64/CuisUniversity-3938.image!


!classRemoval: #Cart stamp: 'g j 11/7/2019 20:25:18'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items montoTotal'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Card stamp: 'g j 11/7/2019 20:25:18'!
Object subclass: #Card
	instanceVariableNames: 'creditNumber expiration owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cajero stamp: 'g j 11/7/2019 20:25:19'!
Object subclass: #Cajero
	instanceVariableNames: 'priceList items cart card sellBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'g j 11/7/2019 20:25:20'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CardTest stamp: 'g j 11/7/2019 20:25:20'!
TestCase subclass: #CardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CajeroTest stamp: 'g j 11/7/2019 20:25:21'!
TestCase subclass: #CajeroTest
	instanceVariableNames: 'carty sellBooky cart sellBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/gjimenez/Descargas/linux64/TusLibros.st----!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/7/2019 20:25:50'!
ERROR!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/7/2019 20:26:01'!
ERROR!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:27:01' prior: 50783304!
test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts

	| newCartId xxx |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	newCartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	self assert: (xxx listCartWithId: newCartId) isEmpty.! !

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/7/2019 20:27:02'!
ERROR!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/7/2019 20:27:14'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:28:34' prior: 50783401!
listBooks
	| listedBooks |
	listedBooks := OrderedCollection new.
	items do: [:anItem | 
		(listedBooks allSatisfy: [
									:aBook | aBook first ~=anItem]) ifTrue: [
			 																		listedBooks add:(anItem @ (items occurrencesOf: anItem))]].
																			
	^listedBooks.! !

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/7/2019 20:29:03'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:37:44' prior: 50783730!
listBooks
	| listedBooks |
	listedBooks := Dictionary new.
	items do: [:anItem | 
		(listedBooks allSatisfy: [
									:aBook | aBook first ~=anItem]) ifTrue: [
			 																		listedBooks add:(anItem -> (items occurrencesOf: anItem))]].
																			
	^listedBooks.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:37:50' prior: 50783313!
test02SeAgregaUnLibroAlCarritoYAlListarloAparece

	| newCartId xxx libros |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	newCartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: newCartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	libros := (xxx listCartWithId: newCartId).
	
	
	self assert: 1 equals: libros size.
! !

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/7/2019 20:37:50'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/7/2019 20:37:50'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/7/2019 20:37:50'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:40:41' prior: 50783758!
test02SeAgregaUnLibroAlCarritoYAlListarloAparece

	| newCartId xxx libros |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	newCartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: newCartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	libros := (xxx listCartWithId: newCartId).
	
	
	self assert: 1 equals: libros size.
	self assert: 1 equals: (libros at: testObjectsFactory itemSellByTheStore).! !

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/7/2019 20:40:42'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/7/2019 20:40:42'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/7/2019 20:40:42'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:44:07'!
test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido

	| xxx |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	
	self should: [xxx createCartForId: 4 withPassword: 'keloke'.]
		raise: Error - MessageNotUnderstood
		withMessageText: XXX usuarioInvalido.
! !

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/7/2019 20:44:16'!
ERROR!
!XXX class methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:44:38'!
usuarioInvalido
	self shouldBeImplemented.! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:44:51' prior: 50783827!
usuarioInvalido
	^'Usuario invalido'! !

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/7/2019 20:44:56'!
FAILURE!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:46:49' prior: 50783668!
createCartForId: aCartId withPassword: aString 
	
	| newCart |
	
	self assertValidUser.
	newCart := Cart acceptingItemsOf: catalog withId: aCartId.
	
	carts add: newCart.
	
	^newCart id.! !

!classDefinition: #Authenticator category: #TusLibros stamp: 'g j 11/7/2019 20:47:53'!
Object subclass: #Authenticator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:47:44' prior: 50783812!
test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido

	| xxx auth |
	auth := Authenticator new.
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog withAuthenticator: auth.
	
	
	self should: [xxx createCartForId: 4 withPassword: 'keloke'.]
		raise: Error - MessageNotUnderstood
		withMessageText: XXX usuarioInvalido.
! !

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/7/2019 20:47:59'!
ERROR!
!XXX class methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:48:06'!
withCatalog: aDictionary withAuthenticator: anAuthenticator 
	self shouldBeImplemented.! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:49:11' prior: 50783873!
withCatalog: aCatalog withAuthenticator: anAuthenticator 
	^self new initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator.! !

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/7/2019 20:49:14'!
ERROR!

!classDefinition: #XXX category: #TusLibros stamp: 'g j 11/7/2019 20:49:18'!
Object subclass: #XXX
	instanceVariableNames: 'catalog carts dictionary authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'initialization' stamp: 'g j 11/7/2019 20:49:18'!
initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator 
	self shouldBeImplemented.
	catalog := aCatalog.
	authenticator := anAuthenticator.! !
!XXX methodsFor: 'initialization' stamp: 'g j 11/7/2019 20:49:24' prior: 50783897!
initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator 
	catalog := aCatalog.
	authenticator := anAuthenticator.! !

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/7/2019 20:49:41'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:50:06' prior: 50783840!
createCartForId: aCartId withPassword: aString 
	
	| newCart |
	
	self assertValidUser.
	newCart := Cart acceptingItemsOf: catalog withId: aCartId.
	
	carts add: newCart.
	
	^newCart id.! !
!XXX methodsFor: 'nil' stamp: 'g j 11/7/2019 20:51:06'!
assertValidUser: anId with: aPassword
	authenticator authWithId: anId andPass: aPassword.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:52:35' prior: 50783924!
assertValidUser: anId with: aPassword
	(authenticator authWithId: anId andPass: aPassword) ifFalse: [^self error: self class usuarioInvalido].! !
!Authenticator methodsFor: 'no messages' stamp: 'g j 11/7/2019 20:53:10'!
authWithId: anId andPass: aPassword
^self subclassResponsibility.! !

Authenticator subclass: #ValidAuthenticator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ValidAuthenticator category: #TusLibros stamp: 'g j 11/7/2019 20:53:23'!
Authenticator subclass: #ValidAuthenticator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Authenticator subclass: #InvalidAuthenticator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InvalidAuthenticator category: #TusLibros stamp: 'g j 11/7/2019 20:53:32'!
Authenticator subclass: #InvalidAuthenticator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/7/2019 20:53:46'!
ERROR!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:54:16' prior: 50783856!
test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido

	| xxx auth |
	auth := InvalidAuthenticator new.
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog withAuthenticator: auth.
	
	
	self should: [xxx createCartForId: 4 withPassword: 'keloke'.]
		raise: Error - MessageNotUnderstood
		withMessageText: XXX usuarioInvalido.
! !

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/7/2019 20:54:34'!
ERROR!
!InvalidAuthenticator methodsFor: 'nil' stamp: 'g j 11/7/2019 20:54:54'!
authWithId: anId andPass: aPassword
^false.! !

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/7/2019 20:55:00'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:55:41' prior: 50783916!
createCartForId: aCartId withPassword: aString 
	
	| newCart |
	
	self assertValidUser: aCartId with: aString .
	newCart := Cart acceptingItemsOf: catalog withId: aCartId.
	
	carts add: newCart.
	
	^newCart id.! !

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/7/2019 20:55:46'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/7/2019 20:55:46'!
ERROR!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/7/2019 20:55:46'!
ERROR!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/7/2019 20:55:46'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:56:19' prior: 50783784!
test02SeAgregaUnLibroAlCarritoYAlListarloAparece

	| newCartId xxx libros auth |
	auth := ValidAuthenticator new.
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog withAuthenticator: auth.
	
	newCartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: newCartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	libros := (xxx listCartWithId: newCartId).
	
	
	self assert: 1 equals: libros size.
	self assert: 1 equals: (libros at: testObjectsFactory itemSellByTheStore).! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/7/2019 20:56:31' prior: 50783712!
test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts

	| newCartId xxx auth |
	auth := ValidAuthenticator new.
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog withAuthenticator: auth.
	
	newCartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	self assert: (xxx listCartWithId: newCartId) isEmpty.! !
!ValidAuthenticator methodsFor: 'nil' stamp: 'g j 11/7/2019 20:56:49'!
authWithId: anId andPass: aPassword
^true.! !

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/7/2019 20:56:58'!
ERROR!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/7/2019 20:57:53'!
ERROR!
!XXX methodsFor: 'initialization' stamp: 'g j 11/7/2019 20:58:58' prior: 50783905!
initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator 
	carts := OrderedCollection new.
	catalog := aCatalog.
	authenticator := anAuthenticator.! !

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/7/2019 20:59:03'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/7/2019 20:59:03'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/7/2019 20:59:03'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/7/2019 20:59:03'!
PASSED!

----QUIT----(7 November 2019 21:00:16) CuisUniversity-3938.image priorSource: 14443101!

----STARTUP---- (11 November 2019 16:46:51) as /home/gjimenez/Descargas/linux64/CuisUniversity-3938.image!


----End fileIn of /home/gjimenez/Descargas/linux64/MarsRover-SinReificarNada.st----!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/11/2019 17:09:43'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 17:09:43'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 17:09:43'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/11/2019 17:09:43'!
PASSED!
!Cart class methodsFor: 'instance creation' stamp: 'g j 11/11/2019 17:35:37'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog withId: 1 ! !
!Cart class methodsFor: 'instance creation' stamp: 'g j 11/11/2019 17:35:42' prior: 50784474!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog! !
!Cart methodsFor: 'initialization' stamp: 'g j 11/11/2019 17:36:00'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !

Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'g j 11/11/2019 17:36:10'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'g j 11/11/2019 17:36:21' prior: 50783615!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'g j 11/11/2019 17:36:26'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'g j 11/11/2019 17:36:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'g j 11/11/2019 17:36:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'g j 11/11/2019 17:36:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'g j 11/11/2019 17:36:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'g j 11/11/2019 17:36:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'g j 11/11/2019 17:36:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'g j 11/11/2019 17:36:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'g j 11/11/2019 17:36:27'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'g j 11/11/2019 17:36:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'g j 11/11/2019 17:36:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'g j 11/11/2019 17:36:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'g j 11/11/2019 17:36:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'g j 11/11/2019 17:36:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'g j 11/11/2019 17:36:32'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'g j 11/11/2019 17:36:32'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 17:36:39'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 17:36:39'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 17:36:39'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/11/2019 17:36:39'!
PASSED!

!methodRemoval: Cart #id stamp: 'g j 11/11/2019 17:37:20'!
id
	^id!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 17:39:46' prior: 50783995!
createCartForId: anUserId withPassword: aString 
	
	| newCart |
	
	self assertValidUser: anUserId with: aString .
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: 1->newCart.
	
	^newCart id.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 17:39:54' prior: 50784576!
createCartForId: anUserId withPassword: aString 
	
	| newCart |
	
	self assertValidUser: anUserId with: aString .
	newCart := Cart acceptingItemsOf: catalog.
	
	carts add: 1->newCart.
	
	^1.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 17:41:05' prior: 50784039!
test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts

	| newCartId xxx |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	newCartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	self assert: (xxx listCartWithId: newCartId) isEmpty.! !
!XXX methodsFor: 'initialization' stamp: 'g j 11/11/2019 17:41:20' prior: 50783684!
initializeWithCatalog: aCatalog 
	catalog := aCatalog.
	carts := Dictionary new.! !

!classDefinition: #XXX category: #TusLibros stamp: 'g j 11/11/2019 17:41:47'!
Object subclass: #XXX
	instanceVariableNames: 'catalog carts dictionary authenticator users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'initialization' stamp: 'g j 11/11/2019 17:41:51' prior: 50784606!
initializeWithCatalog: aCatalog 
	catalog := aCatalog.
	carts := Dictionary new.
	users := Dictionary new.
	users add: 2->'keloke'! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 17:42:20' prior: 50783970!
test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido

	| xxx |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	
	self should: [xxx createCartForId: 4 withPassword: 'keloke'.]
		raise: Error - MessageNotUnderstood
		withMessageText: XXX usuarioInvalido.
! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 17:42:39' prior: 50784019!
test02SeAgregaUnLibroAlCarritoYAlListarloAparece

	| newCartId xxx libros |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	newCartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: newCartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	libros := (xxx listCartWithId: newCartId).
	
	
	self assert: 1 equals: libros size.
	self assert: 1 equals: (libros at: testObjectsFactory itemSellByTheStore).! !

!methodRemoval: XXX #initializeWithCatalog:withAuthenticator: stamp: 'g j 11/11/2019 17:43:38'!
initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator 
	carts := OrderedCollection new.
	catalog := aCatalog.
	authenticator := anAuthenticator.!

!methodRemoval: XXX class #withCatalog:withAuthenticator: stamp: 'g j 11/11/2019 17:43:48'!
withCatalog: aCatalog withAuthenticator: anAuthenticator 
	^self new initializeWithCatalog: aCatalog withAuthenticator: anAuthenticator.!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 17:43:54'!
ERROR!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 17:43:54'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 17:46:26' prior: 50783930!
assertValidUser: anId with: aPassword
	users at: anId = aPassword ifAbsent: [self error: self class usuarioInvalido].! !

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 17:46:31'!
ERROR!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 17:46:35'!
ERROR!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 17:46:35'!
ERROR!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/11/2019 17:46:35'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 17:46:52'!
ERROR!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 17:46:52'!
ERROR!

users at: anId = aPassword!

users at: 2 = 'keloke'!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 17:48:55'!
ERROR!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 17:48:55'!
ERROR!

users keys!

users keys class!

users keys at:1!

users keys at:1!

users at:2!

users at: 2!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 17:50:33' prior: 50784679!
assertValidUser: anId with: aPassword
	(users at: anId ifAbsent: [self error: self class usuarioInvalido]) = aPassword.! !

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 17:51:03'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 17:51:44' prior: 50783676!
listCartWithId: aCartId
	| libros actualCart |
	actualCart := carts at: aCartId ifAbsent:[].

	libros := actualCart listBooks.
	
	^libros.! !

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 17:51:55'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 17:51:56'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/11/2019 17:51:57'!
PASSED!

!classRemoval: #ValidAuthenticator stamp: 'g j 11/11/2019 17:52:29'!
Authenticator subclass: #ValidAuthenticator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InvalidAuthenticator stamp: 'g j 11/11/2019 17:52:30'!
Authenticator subclass: #InvalidAuthenticator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Authenticator stamp: 'g j 11/11/2019 17:52:30'!
Object subclass: #Authenticator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 17:52:32'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 17:52:32'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/11/2019 17:52:32'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 17:54:13'!
test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart

	| xxx |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	
! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 17:55:29' prior: 50784778!
test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart

	| xxx cart1Id cart2Id libros1 libros2 |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	
	cart1Id := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cart1Id withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	libros1 := (xxx listCartWithId: cart1Id).
	
	
	self assert: 1 equals: libros1 size.
	self assert: 1 equals: (libros1 at: testObjectsFactory itemSellByTheStore).
	
	cart2Id := xxx createCartForId: 2 withPassword: 'keloke'.
	
	libros2 := (xxx listCartWithId: cart2Id).
	
	self assert: libros2 isEmpty.! !

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/11/2019 17:55:37'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 17:55:37'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 17:55:37'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/11/2019 17:55:37'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/11/2019 17:55:37'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 17:56:53' prior: 50784786!
test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart

	| xxx cart1Id cart2Id libros1 libros2 |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	
	cart1Id := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cart1Id withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	libros1 := (xxx listCartWithId: cart1Id).
	
	cart2Id := xxx createCartForId: 2 withPassword: 'keloke'.
	
	libros2 := (xxx listCartWithId: cart2Id).
	
	self assert: 1 equals: libros1 size.
	self assert: 1 equals: (libros1 at: testObjectsFactory itemSellByTheStore).
	
	self assert: libros2 isEmpty.! !

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/11/2019 17:56:53'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 17:56:53'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 17:56:53'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/11/2019 17:56:53'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/11/2019 17:56:53'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/11/2019 17:56:56'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 17:56:56'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 17:56:56'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/11/2019 17:56:56'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/11/2019 17:56:56'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 17:57:21' prior: 50784827!
test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart

	| xxx cart1Id cart2Id libros1 libros2 |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	
	cart1Id := xxx createCartForId: 2 withPassword: 'keloke'.
	cart2Id := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cart1Id withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	libros1 := (xxx listCartWithId: cart1Id).
	
	libros2 := (xxx listCartWithId: cart2Id).
	
	self assert: 1 equals: libros1 size.
	self assert: 1 equals: (libros1 at: testObjectsFactory itemSellByTheStore).
	
	self assert: libros2 isEmpty.! !

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/11/2019 17:57:22'!
FAILURE!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 17:58:30' prior: 50784586!
createCartForId: anUserId withPassword: aString 
	
	| newCart nextCartId |
	
	self assertValidUser: anUserId with: aString .
	newCart := Cart acceptingItemsOf: catalog.
	
	nextCartId := carts size + 1.
	
	carts add: nextCartId->newCart.
	
	^nextCartId.! !

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/11/2019 17:58:38'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 17:58:38'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 17:58:38'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/11/2019 17:58:38'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/11/2019 17:58:38'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:00:08'!
test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos

	| xxx cart1Id cart2Id libros1 libros2 |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	
	cart1Id := xxx createCartForId: 2 withPassword: 'keloke'.
	cart2Id := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cart1Id withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	libros1 := (xxx listCartWithId: cart1Id).
	
	libros2 := (xxx listCartWithId: cart2Id).
	
	self assert: 1 equals: libros1 size.
	self assert: 1 equals: (libros1 at: testObjectsFactory itemSellByTheStore).
	
	self assert: libros2 isEmpty.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:00:44' prior: 50784941!
test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos

	| xxx cart1Id cart2Id libros1 libros2 |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	
	cart1Id := xxx createCartForId: 2 withPassword: 'keloke'.
	cart2Id := xxx createCartForId: 3 withPassword: 'jajaja'.
	
	xxx addToCartWithId: cart1Id withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	libros1 := (xxx listCartWithId: cart1Id).
	
	libros2 := (xxx listCartWithId: cart2Id).
	
	self assert: 1 equals: libros1 size.
	self assert: 1 equals: (libros1 at: testObjectsFactory itemSellByTheStore).
	
	self assert: libros2 isEmpty.! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'g j 11/11/2019 18:01:16'!
anotherItemSellByTheStore
	
	^ 'anotherValidBook'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'g j 11/11/2019 18:01:33'!
anotherItemSellByTheStorePrice
	
	^33! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'g j 11/11/2019 18:02:27' prior: 50783620!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		at: self anotherItemSellByTheStore put: self anotherItemSellByTheStorePrice;
		yourself ! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:04:41' prior: 50784964!
test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos

	| xxx cart1Id cart2Id libros1 libros2 |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	
	cart1Id := xxx createCartForId: 2 withPassword: 'keloke'.
	cart2Id := xxx createCartForId: 3 withPassword: 'jajaja'.
	
	xxx addToCartWithId: cart1Id withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	xxx addToCartWithId: cart1Id withISBN: testObjectsFactory anotherItemSellByTheStore withQuantity: 1.
	
	xxx addToCartWithId: cart2Id withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	libros1 := (xxx listCartWithId: cart1Id).
	
	libros2 := (xxx listCartWithId: cart2Id).
	
	self assert: 2 equals: libros1 size.
	self assert: 1 equals: (libros1 at: testObjectsFactory itemSellByTheStore).
	
	self assert: libros2 isEmpty.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:05:52' prior: 50785005!
test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos

	| xxx cart1Id cart2Id libros1 libros2 |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	
	cart1Id := xxx createCartForId: 2 withPassword: 'keloke'.
	cart2Id := xxx createCartForId: 3 withPassword: 'jajaja'.
	
	xxx addToCartWithId: cart1Id withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	xxx addToCartWithId: cart1Id withISBN: testObjectsFactory anotherItemSellByTheStore withQuantity: 1.
	
	xxx addToCartWithId: cart2Id withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	libros1 := (xxx listCartWithId: cart1Id).
	
	libros2 := (xxx listCartWithId: cart2Id).
	
	self assert: 2 equals: libros1 size.
	self assert: 1 equals: (libros1 at: testObjectsFactory itemSellByTheStore).
	self assert: 1 equals: (libros1 at: testObjectsFactory anotherItemSellByTheStore ).
	
	self assert: 1 equals: (libros2 at: testObjectsFactory itemSellByTheStore).! !

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/11/2019 18:05:53'!
ERROR!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:06:09' prior: 50785034!
test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos

	| xxx cart1Id cart2Id libros1 libros2 |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	
	cart1Id := xxx createCartForId: 2 withPassword: 'keloke'.
	cart2Id := xxx createCartForId: 3 withPassword: 'jajaja'.
	
	xxx addToCartWithId: cart1Id withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	xxx addToCartWithId: cart1Id withISBN: testObjectsFactory anotherItemSellByTheStore withQuantity: 1.
	
	xxx addToCartWithId: cart2Id withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	libros1 := (xxx listCartWithId: cart1Id).
	
	libros2 := (xxx listCartWithId: cart2Id).
	
	self assert: 2 equals: libros1 size.
	self assert: 1 equals: (libros1 at: testObjectsFactory itemSellByTheStore).
	self assert: 1 equals: (libros1 at: testObjectsFactory anotherItemSellByTheStore ).
	
	self assert: 2 equals: libros2 size.
	self assert: 1 equals: (libros2 at: testObjectsFactory itemSellByTheStore).! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:06:12' prior: 50785071!
test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos

	| xxx cart1Id cart2Id libros1 libros2 |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	
	cart1Id := xxx createCartForId: 2 withPassword: 'keloke'.
	cart2Id := xxx createCartForId: 3 withPassword: 'jajaja'.
	
	xxx addToCartWithId: cart1Id withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	xxx addToCartWithId: cart1Id withISBN: testObjectsFactory anotherItemSellByTheStore withQuantity: 1.
	
	xxx addToCartWithId: cart2Id withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	libros1 := (xxx listCartWithId: cart1Id).
	
	libros2 := (xxx listCartWithId: cart2Id).
	
	self assert: 2 equals: libros1 size.
	self assert: 1 equals: (libros1 at: testObjectsFactory itemSellByTheStore).
	self assert: 1 equals: (libros1 at: testObjectsFactory anotherItemSellByTheStore ).
	
	self assert: 1 equals: libros2 size.
	self assert: 1 equals: (libros2 at: testObjectsFactory itemSellByTheStore).! !

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/11/2019 18:06:13'!
ERROR!
!XXX methodsFor: 'initialization' stamp: 'g j 11/11/2019 18:06:44' prior: 50784619!
initializeWithCatalog: aCatalog 
	catalog := aCatalog.
	carts := Dictionary new.
	users := Dictionary new.
	users add: 2->'keloke'.
	users add: 3->'jajaja'.! !

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/11/2019 18:06:48'!
ERROR!

listedBooks keyAtValue: aBook ifAbsent: [] !
!Cart methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:11:06' prior: 50783746!
listBooks
	| listedBooks |
	listedBooks := Dictionary new.
	items do: [:anItem | 
		(listedBooks allSatisfy: [
									:aBook | (listedBooks keyAtValue: aBook) ~=anItem]) ifTrue: [
			 																		listedBooks add:(anItem -> (items occurrencesOf: anItem))]].
																			
	^listedBooks.! !

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/11/2019 18:11:12'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 18:11:12'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 18:11:12'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/11/2019 18:11:12'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/11/2019 18:11:12'!
PASSED!

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/11/2019 18:11:12'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:17:42'!
test06NoSePuedeCheckoutearUnCarritoInexistente

	| xxx |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	self should: [xxx checkoutWithCartId: #id aCreditCardNumber: '113584' anExpirationDate: (October of: 2020) andOwnerName: 'Dario'.]
	raise: Error - MessageNotUnderstood
	withMessageText: XXX CarritoInvalido! !

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/11/2019 18:17:55'!
ERROR!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/11/2019 18:18:26'!
ERROR!
!XXX class methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:18:32'!
CarritoInvalido
	self shouldBeImplemented.! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:19:23' prior: 50785210!
CarritoInvalido
	^'El carrito no existe.'! !

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/11/2019 18:19:33'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:19:39'!
checkoutWithCartId: aSymbol aCreditCardNumber: aString anExpirationDate: aGregorianMonthOfYear andOwnerName: aString4 
	self shouldBeImplemented.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:21:31' prior: 50785223!
checkoutWithCartId: aCartId aCreditCardNumber: aNumber anExpirationDate: aGregorianMonthOfYear andOwnerName: aName 
	self assertCarritoExiste: aCartId.
	
	! !

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/11/2019 18:21:36'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:21:41'!
assertCarritoExiste: aSymbol 
	self shouldBeImplemented.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:22:43' prior: 50785242!
assertCarritoExiste: aCartId 
	(carts includesKey: aCartId) ifFalse: [self error: self class CarritoInvalido.]! !

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/11/2019 18:23:06'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 18:23:06'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 18:23:06'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/11/2019 18:23:06'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/11/2019 18:23:06'!
PASSED!

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/11/2019 18:23:06'!
PASSED!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/11/2019 18:23:06'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:24:01' prior: 50785190!
test06NoSePuedeCheckoutearUnCarritoInexistente

	| xxx |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	self should: [xxx checkoutWithCartId: #id aCreditCardNumber: '113584' anExpirationDate: (October of: 2020) andOwnerName: 'Dario'.]
	raise: Error - MessageNotUnderstood
	withMessageText: XXX CarritoInexistente.! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:24:15'!
CarritoInexistente
	^'El carrito no existe.'! !

!methodRemoval: XXX class #CarritoInvalido stamp: 'g j 11/11/2019 18:24:21'!
CarritoInvalido
	^'El carrito no existe.'!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:27:31'!
test07NoSePuedeCheckoutearUnCarritoVacio

	| xxx cartId |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	
	xxx checkoutWithCartId: cartId aCreditCardNumber: '123456' anExpirationDate: (October of: 2020) andOwnerName: 'Carlitos'.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:27:49' prior: 50785300!
test07NoSePuedeCheckoutearUnCarritoVacio

	| xxx cartId |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	
	xxx checkoutWithCartId: cartId aCreditCardNumber: '123456' anExpirationDate: (October of: 2020) andOwnerName: 'Carlitos'.
! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:28:16' prior: 50785313!
test07NoSePuedeCheckoutearUnCarritoVacio

	| xxx cartId |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	
	self should: [xxx checkoutWithCartId: cartId aCreditCardNumber: '123456' anExpirationDate: (October of: 2020) andOwnerName: 'Carlitos'.]
	raise: Error - MessageNotUnderstood
	withMessageText: XXX CarritoVacio.
	
	! !

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 18:28:20'!
ERROR!
!XXX class methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:28:26'!
CarritoVacio
	self shouldBeImplemented.! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:28:36' prior: 50785345!
CarritoVacio
	^'El carrito esta vacio.'! !

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 18:29:11'!
FAILURE!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:29:58' prior: 50785231!
checkoutWithCartId: aCartId aCreditCardNumber: aNumber anExpirationDate: aGregorianMonthOfYear andOwnerName: aName
	self assertCarritoExiste: aCartId.
	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:31:22' prior: 50785358!
checkoutWithCartId: aCartId aCreditCardNumber: aNumber anExpirationDate: aGregorianMonthOfYear andOwnerName: aName

	"Cashier toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook"
	self assertCarritoExiste: aCartId.
	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:33:20' prior: 50785366!
checkoutWithCartId: aCartId aCreditCardNumber: aNumber anExpirationDate: aGregorianMonthOfYear andOwnerName: aName

	| aCashier aCreditCard |
	aCreditCard := 1.
	aCashier := Cashier toCheckout: aCartId charging: aCreditCard throught: 2 registeringOn: 2
	self assertCarritoExiste: aCartId.
	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:35:19' prior: 50785378!
checkoutWithCartId: aCartId aCreditCardNumber: aNumber anExpirationDate: aGregorianMonthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: aGregorianMonthOfYear.
	"aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: 2 registeringOn: 2"
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:38:58' prior: 50785326!
test07NoSePuedeCheckoutearUnCarritoVacio

	| xxx cartId |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	
	self should: [xxx checkoutWithCartId: cartId aCreditCardNumber: '123456' anExpirationDate: (October of: 2020) andOwnerName: 'Carlitos'.]
	raise: Error - MessageNotUnderstood
	withMessageText: XXX CarritoVacio.
	
	! !

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 18:40:27'!
ERROR!
!XXX class methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:40:33'!
withCatalog: aDictionary throught: aXXXTest 
	self shouldBeImplemented.! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:41:05' prior: 50785426!
withCatalog: aDictionary throught: aMerchantProcessor
	^self new initializeWithCatalog: aDictionary throught: aMerchantProcessor ! !

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 18:41:09'!
ERROR!

!classDefinition: #XXX category: #TusLibros stamp: 'g j 11/11/2019 18:41:24'!
Object subclass: #XXX
	instanceVariableNames: 'catalog carts dictionary authenticator users merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'initialization' stamp: 'g j 11/11/2019 18:41:24'!
initializeWithCatalog: aDictionary throught: aMerchantProcessor 
	self shouldBeImplemented.
	dictionary := aDictionary.
	merchantProcessor := aMerchantProcessor.! !
!XXX methodsFor: 'initialization' stamp: 'g j 11/11/2019 18:41:57' prior: 50785450!
initializeWithCatalog: aCatalog throught: aMerchantProcessor 
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.! !

Object subclass: #XXX
	instanceVariableNames: 'catalog carts users merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XXX category: #TusLibros stamp: 'g j 11/11/2019 18:42:13'!
Object subclass: #XXX
	instanceVariableNames: 'catalog carts users merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XXXTest category: #TusLibros stamp: 'g j 11/11/2019 18:43:05'!
TestCase subclass: #XXXTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:43:04' prior: 50783299!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:44:06'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard 
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:45:02' prior: 50785391!
checkoutWithCartId: aCartId aCreditCardNumber: aNumber anExpirationDate: aGregorianMonthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: aGregorianMonthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor registeringOn: 2.
	
	! !

!classDefinition: #XXX category: #TusLibros stamp: 'g j 11/11/2019 18:46:49'!
Object subclass: #XXX
	instanceVariableNames: 'catalog carts users merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'initialization' stamp: 'g j 11/11/2019 18:46:48' prior: 50785458!
initializeWithCatalog: aCatalog throught: aMerchantProcessor 
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	users := Dictionary new.
	users add: 2->'keloke'.
	users add: 3->'jajaja'.
	salesBook := OrderedCollection new.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:46:59' prior: 50785497!
checkoutWithCartId: aCartId aCreditCardNumber: aNumber anExpirationDate: aGregorianMonthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: aGregorianMonthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor registeringOn: salesBook.
	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:49:49' prior: 50785532!
checkoutWithCartId: aCartId aCreditCardNumber: aNumber anExpirationDate: aGregorianMonthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: aGregorianMonthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor registeringOn: salesBook.
	
	aCashier checkOut.
	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:50:33' prior: 50785549!
checkoutWithCartId: aCartId aCreditCardNumber: aNumber anExpirationDate: aGregorianMonthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: aGregorianMonthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: 1 registeringOn: salesBook.
	
	aCashier checkOut.
	Cashier to
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:50:38' prior: 50785566!
checkoutWithCartId: aCartId aCreditCardNumber: aNumber anExpirationDate: aGregorianMonthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: aGregorianMonthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: 1 registeringOn: salesBook.
	
	aCashier checkOut.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 18:55:50'!
checkoutWithCartId: aCartId on: aDate aCreditCardNumber: aNumber anExpirationDate: monthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: monthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: aDate registeringOn: salesBook.
	
	aCashier checkOut.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:00:11' prior: 50785601!
checkoutWithCartId: aCartId on: aDate aCreditCardNumber: aNumber anExpirationDate: monthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: monthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: aDate registeringOn: salesBook.
	
	[aCashier checkOut.] on: Error - MessageNotUnderstood
	do: [self error: self class CarritoVacio.]! !

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:00:17'!
ERROR!
!XXX methodsFor: 'initialization' stamp: 'g j 11/11/2019 19:00:50' prior: 50785521!
initializeWithCatalog: aCatalog throught: aMerchantProcessor 
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	carts := Dictionary new.
	users := Dictionary new.
	users add: 2->'keloke'.
	users add: 3->'jajaja'.
	salesBook := OrderedCollection new.! !

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:00:56'!
FAILURE!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:02:56'!
FAILURE!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:02:56'!
FAILURE!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:03:06'!
FAILURE!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:03:28'!
FAILURE!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:03:28'!
FAILURE!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:03:45'!
FAILURE!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:04:45'!
FAILURE!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:05:00'!
FAILURE!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:05:14'!
FAILURE!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:06:01' prior: 50785407!
test07NoSePuedeCheckoutearUnCarritoVacio

	| xxx cartId |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	
	self should: [xxx checkoutWithCartId: cartId on: testObjectsFactory today aCreditCardNumber: '123456' anExpirationDate: (October of: 2020) andOwnerName: 'Carlitos'.]
	raise: Error - MessageNotUnderstood
	withMessageText: XXX CarritoVacio.
	
	! !

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:06:04'!
FAILURE!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:06:24'!
FAILURE!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:06:45'!
FAILURE!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:07:21' prior: 50785618!
checkoutWithCartId: aCartId on: aDate aCreditCardNumber: aNumber anExpirationDate: monthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: monthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: aDate registeringOn: salesBook.
	
	[aCashier checkOut.] on: Error - MessageNotUnderstood
	do: [^self error: self class CarritoVacio.]! !

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:07:28'!
FAILURE!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:08:26' prior: 50785713!
checkoutWithCartId: aCartId on: aDate aCreditCardNumber: aNumber anExpirationDate: monthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: monthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: aDate registeringOn: salesBook.
	
	[aCashier checkOut.] on: Cashier 
	do: [self error: self class CarritoVacio.]! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:08:50' prior: 50785736!
checkoutWithCartId: aCartId on: aDate aCreditCardNumber: aNumber anExpirationDate: monthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: monthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: aDate registeringOn: salesBook.
	
	[aCashier checkOut.] on: Cashier cartCanNotBeEmptyErrorMessage
	do: [self error: self class CarritoVacio.]! !

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:08:55'!
FAILURE!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:09:38' prior: 50785755!
checkoutWithCartId: aCartId on: aDate aCreditCardNumber: aNumber anExpirationDate: monthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: monthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: aDate registeringOn: salesBook.
	
	[aCashier checkOut.] on: Cashier cartCanNotBeEmptyErrorMessage
	do: [:err | self error: self class CarritoVacio.]! !

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:09:44'!
FAILURE!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:10:49' prior: 50785778!
checkoutWithCartId: aCartId on: aDate aCreditCardNumber: aNumber anExpirationDate: monthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: monthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: aDate registeringOn: salesBook.
	
	[aCashier checkOut.] on: Cashier cartCanNotBeEmptyErrorMessage
	do: [:err | self error: err.]! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:10:56' prior: 50785801!
checkoutWithCartId: aCartId on: aDate aCreditCardNumber: aNumber anExpirationDate: monthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: monthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: aDate registeringOn: salesBook.
	
	[aCashier checkOut.] on: Cashier cartCanNotBeEmptyErrorMessage
	do: [:err | err.]! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:11:11' prior: 50785686!
test07NoSePuedeCheckoutearUnCarritoVacio

	| xxx cartId |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	
	self should: [xxx checkoutWithCartId: cartId on: testObjectsFactory today aCreditCardNumber: '123456' anExpirationDate: (October of: 2020) andOwnerName: 'Carlitos'.]
	raise: Error - MessageNotUnderstood
	withMessageText: Cashier cartCanNotBeEmptyErrorMessage .
	
	! !

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:11:13'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 19:11:13'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 19:11:13'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/11/2019 19:11:13'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/11/2019 19:11:13'!
PASSED!

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/11/2019 19:11:13'!
PASSED!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/11/2019 19:11:13'!
ERROR!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:11:13'!
PASSED!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/11/2019 19:11:13'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:11:51' prior: 50785247!
assertCarritoExiste: aCartId 
	(carts includesKey: aCartId) ifFalse: [self error: self class CarritoInexistente.]! !

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:11:55'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 19:11:56'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 19:11:56'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/11/2019 19:11:56'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/11/2019 19:11:56'!
PASSED!

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/11/2019 19:11:56'!
PASSED!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/11/2019 19:11:56'!
PASSED!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:11:56'!
PASSED!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:12:37' prior: 50785820!
checkoutWithCartId: aCartId on: aDate aCreditCardNumber: aNumber anExpirationDate: monthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: monthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: aDate registeringOn: salesBook.
	
	[aCashier checkOut.] on: Cashier cartCanNotBeEmptyErrorMessage
	do: [:err | self error: self class CarritoVacio.]! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:12:49' prior: 50785839!
test07NoSePuedeCheckoutearUnCarritoVacio

	| xxx cartId |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	
	self should: [xxx checkoutWithCartId: cartId on: testObjectsFactory today aCreditCardNumber: '123456' anExpirationDate: (October of: 2020) andOwnerName: 'Carlitos'.]
	raise: Error - MessageNotUnderstood
	withMessageText: XXX CarritoVacio.
	
	! !

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:12:50'!
FAILURE!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:13:21' prior: 50785943!
test07NoSePuedeCheckoutearUnCarritoVacio

	| xxx cartId |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	
	self should: [xxx checkoutWithCartId: cartId on: testObjectsFactory today aCreditCardNumber: '123456' anExpirationDate: (October of: 2020) andOwnerName: 'Carlitos'.]
	raise: Error - MessageNotUnderstood
	withMessageText: Cashier cartCanNotBeEmptyErrorMessage.
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:14:59'!
test08DespuesDeCheckoutearElUsuarioTieneUnaCompra

	| xxx cartId |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	
	self should: [xxx checkoutWithCartId: cartId on: testObjectsFactory today aCreditCardNumber: '123456' anExpirationDate: (October of: 2020) andOwnerName: 'Carlitos'.]
	raise: Error - MessageNotUnderstood
	withMessageText: Cashier cartCanNotBeEmptyErrorMessage.
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:18:38' prior: 50785981!
test08DespuesDeCheckoutearElUsuarioTieneUnaCompra

	| xxx cartId |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId on: testObjectsFactory today aCreditCardNumber: 1 anExpirationDate: 1 andOwnerName: 1.
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:20:00' prior: 50785999!
test08DespuesDeCheckoutearElUsuarioTieneUnaCompra

	| xxx cartId |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId on: testObjectsFactory today aCreditCardNumber: '123456' anExpirationDate: (October of: 2020) andOwnerName: 'Carlitos'.
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:21:18' prior: 50785279!
test06NoSePuedeCheckoutearUnCarritoInexistente

	| xxx |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	self should: [xxx checkoutWithCartId: #id
		 aCreditCardNumber: '113584'
		 anExpirationDate: testObjectsFactory notExpiredCreditCard
		 andOwnerName: 'Dario'.]
	raise: Error - MessageNotUnderstood
	withMessageText: XXX CarritoInexistente.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:22:02' prior: 50785964!
test07NoSePuedeCheckoutearUnCarritoVacio

	| xxx cartId |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	
	self should: [xxx checkoutWithCartId: cartId
		 on: testObjectsFactory today
		 aCreditCardNumber: '123456' 
		 anExpirationDate: testObjectsFactory notExpiredCreditCard
		 andOwnerName: 'Carlitos'.]
	raise: Error - MessageNotUnderstood
	withMessageText: Cashier cartCanNotBeEmptyErrorMessage.
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:23:04' prior: 50786016!
test08DespuesDeCheckoutearElUsuarioTieneUnaCompra

	| xxx cartId |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId
	 on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory 
	notExpiredCreditCard andOwnerName: 'Carlitos'.
	
	
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:29:36' prior: 50786068!
test08DespuesDeCheckoutearElUsuarioTieneUnaCompra

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId
	 on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory 
	notExpiredCreditCard andOwnerName: 'Carlitos'.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert:(listaCompras at: testObjectsFactory itemNotSellByTheStore ) = 1.
	
	! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 19:29:41'!
ERROR!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 19:29:41'!
ERROR!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:30:44' prior: 50786087!
test08DespuesDeCheckoutearElUsuarioTieneUnaCompra

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId
	 on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredCreditCard 
	notExpiredCreditCard andOwnerName: 'Carlitos'.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert:(listaCompras at: testObjectsFactory itemNotSellByTheStore ) = 1.
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:31:02' prior: 50786118!
test08DespuesDeCheckoutearElUsuarioTieneUnaCompra

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredCreditCard 
	notExpiredCreditCard andOwnerName: 'Carlitos'.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert:(listaCompras at: testObjectsFactory itemNotSellByTheStore ) = 1.
	
	! !

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:31:04'!
PASSED!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 19:31:08'!
ERROR!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 19:31:08'!
ERROR!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:31:15'!
notExpiredCreditCard
	self shouldBeImplemented.! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 19:32:00'!
ERROR!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 19:32:00'!
ERROR!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:32:21' prior: 50786143!
test08DespuesDeCheckoutearElUsuarioTieneUnaCompra

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredCreditCard andOwnerName: 'Carlitos'.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert:(listaCompras at: testObjectsFactory itemNotSellByTheStore ) = 1.
	
	! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 19:32:24'!
ERROR!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 19:32:24'!
ERROR!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 19:33:21'!
ERROR!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:33:52' prior: 50786189!
test08DespuesDeCheckoutearElUsuarioTieneUnaCompra

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredCreditCard
	andOwnerName: 'Carlitos'.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert:(listaCompras at: testObjectsFactory itemNotSellByTheStore ) = 1.
	
	! !

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:33:54'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 19:33:54'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 19:33:54'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/11/2019 19:33:54'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/11/2019 19:33:55'!
PASSED!

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/11/2019 19:33:55'!
PASSED!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/11/2019 19:33:55'!
PASSED!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:33:55'!
PASSED!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 19:33:55'!
ERROR!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 19:33:55'!
ERROR!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 19:34:08'!
PASSED!

!methodRemoval: XXX #checkoutWithCartId:aCreditCardNumber:anExpirationDate:andOwnerName: stamp: 'g j 11/11/2019 19:34:23'!
checkoutWithCartId: aCartId aCreditCardNumber: aNumber anExpirationDate: aGregorianMonthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: aGregorianMonthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: 1 registeringOn: salesBook.
	
	aCashier checkOut.!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:34:39' prior: 50786034!
test06NoSePuedeCheckoutearUnCarritoInexistente

	| xxx |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	self should: [xxx checkoutWithCartId: #id
		on: testObjectsFactory today
		 aCreditCardNumber: '113584'
		 anExpirationDate: testObjectsFactory notExpiredCreditCard
		 andOwnerName: 'Dario'.]
	raise: Error - MessageNotUnderstood
	withMessageText: XXX CarritoInexistente.! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 19:34:46'!
ERROR!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 19:35:16'!
ERROR!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 19:35:27'!
ERROR!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:39:59' prior: 50786223!
test08DespuesDeCheckoutearElUsuarioTieneUnaCompra

	| xxx cartId listaCompras aDateToExpire |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	aDateToExpire := 1.
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredCreditCard
	andOwnerName: 'Carlitos'.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert:(listaCompras at: testObjectsFactory itemNotSellByTheStore ) = 1.
	
	! !

!methodRemoval: CreditCard #notExpiredCreditCard stamp: 'g j 11/11/2019 19:40:57'!
notExpiredCreditCard
	self shouldBeImplemented.!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:42:08' prior: 50786329!
test08DespuesDeCheckoutearElUsuarioTieneUnaCompra

	| xxx cartId listaCompras aDateToExpire |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	aDateToExpire := (Month month: testObjectsFactory today monthIndex year: testObjectsFactory today yearNumber + 1).
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: aDateToExpire 
	andOwnerName: 'Carlitos'.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert:(listaCompras at: testObjectsFactory itemNotSellByTheStore ) = 1.
	
	! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 19:42:08'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 19:42:19'!
listPurchasesForUserId: aSmallInteger withPassword: aString 
	self shouldBeImplemented.! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 20:49:02'!
ERROR!

!classDefinition: #XXX category: #TusLibros stamp: 'g j 11/11/2019 20:50:06'!
Object subclass: #XXX
	instanceVariableNames: 'catalog carts users merchantProcessor salesBook checkoutedCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'initialization' stamp: 'g j 11/11/2019 20:50:04' prior: 50785641!
initializeWithCatalog: aCatalog throught: aMerchantProcessor 
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	carts := Dictionary new.
	users := Dictionary new.
	users add: 2->'keloke'.
	users add: 3->'jajaja'.
	salesBook := OrderedCollection new.
	checkoutedCarts := OrderedCollection new.! !

!classDefinition: #XXX category: #TusLibros stamp: 'g j 11/11/2019 20:50:19'!
Object subclass: #XXX
	instanceVariableNames: 'catalog carts users merchantProcessor salesBook checkoutedCarts clientSales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'initialization' stamp: 'g j 11/11/2019 20:50:18' prior: 50786406!
initializeWithCatalog: aCatalog throught: aMerchantProcessor 
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	carts := Dictionary new.
	users := Dictionary new.
	users add: 2->'keloke'.
	users add: 3->'jajaja'.
	salesBook := OrderedCollection new.
	checkoutedCarts := OrderedCollection new.
	clientSales := Dictionary new.! !

!classDefinition: #Sale category: #TusLibros stamp: 'g j 11/11/2019 20:51:12'!
Object subclass: #Sale
	instanceVariableNames: 'total saleItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'g j 11/11/2019 20:51:11' prior: 50783572!
initializeTotal: aTotal

	total := aTotal.
	saleItems := Dictionary new.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 20:51:55' prior: 50786388!
listPurchasesForUserId: anUserId withPassword: aString 
	self shouldBeImplemented.! !

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 20:52:01'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 20:52:01'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 20:52:01'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/11/2019 20:52:01'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/11/2019 20:52:01'!
PASSED!

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/11/2019 20:52:01'!
PASSED!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/11/2019 20:52:01'!
PASSED!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 20:52:01'!
PASSED!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 20:52:01'!
ERROR!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 20:52:01'!
ERROR!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 20:52:06'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 20:52:06'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 20:52:06'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/11/2019 20:52:06'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/11/2019 20:52:06'!
PASSED!

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/11/2019 20:52:06'!
PASSED!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/11/2019 20:52:06'!
PASSED!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 20:52:06'!
PASSED!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 20:52:06'!
ERROR!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 20:52:06'!
ERROR!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 20:52:17'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 20:52:17'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/11/2019 20:52:17'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/11/2019 20:52:17'!
PASSED!

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/11/2019 20:52:17'!
PASSED!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/11/2019 20:52:17'!
PASSED!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 20:52:17'!
PASSED!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 20:52:17'!
ERROR!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 20:52:17'!
ERROR!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 20:52:24'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 20:52:27'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/11/2019 20:52:42'!
PASSED!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 20:52:56'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'g j 11/11/2019 20:54:29'!
notExpiredDate

^(Month month: self today monthIndex year: self today yearNumber + 1).! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 20:54:49' prior: 50786358!
test08DespuesDeCheckoutearElUsuarioTieneUnaCompra

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert:(listaCompras at: testObjectsFactory itemNotSellByTheStore ) = 1.
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 20:54:58' prior: 50786049!
test07NoSePuedeCheckoutearUnCarritoVacio

	| xxx cartId |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	
	self should: [xxx checkoutWithCartId: cartId
		 on: testObjectsFactory today
		 aCreditCardNumber: '123456' 
		 anExpirationDate: testObjectsFactory notExpiredDate
		 andOwnerName: 'Carlitos'.]
	raise: Error - MessageNotUnderstood
	withMessageText: Cashier cartCanNotBeEmptyErrorMessage.
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 20:55:03' prior: 50786303!
test06NoSePuedeCheckoutearUnCarritoInexistente

	| xxx |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog.
	
	self should: [xxx checkoutWithCartId: #id
		on: testObjectsFactory today
		 aCreditCardNumber: '113584'
		 anExpirationDate: testObjectsFactory notExpiredDate
		 andOwnerName: 'Dario'.]
	raise: Error - MessageNotUnderstood
	withMessageText: XXX CarritoInexistente.! !

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 20:55:13'!
PASSED!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 20:55:16'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/11/2019 20:55:16'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/11/2019 20:55:16'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/11/2019 20:55:16'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/11/2019 20:55:16'!
PASSED!

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/11/2019 20:55:16'!
PASSED!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/11/2019 20:55:16'!
PASSED!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/11/2019 20:55:16'!
PASSED!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 20:55:16'!
ERROR!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/11/2019 20:55:16'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 20:56:59' prior: 50785923!
checkoutWithCartId: aCartId on: aDate aCreditCardNumber: aNumber anExpirationDate: monthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: monthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: aDate registeringOn: salesBook.
	
	[aCashier checkOut.] on: Cashier cartCanNotBeEmptyErrorMessage
	do: [:err | self error: self class CarritoVacio.].
	
	checkoutedCarts add: cartToCheckout.
	carts remove: cartToCheckout.! !

!classDefinition: #XXX category: #TusLibros stamp: 'g j 11/11/2019 20:59:32'!
Object subclass: #XXX
	instanceVariableNames: 'catalog carts users merchantProcessor salesBook checkoutedCarts clientSales cartsPerClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'initialization' stamp: 'g j 11/11/2019 20:59:30' prior: 50786427!
initializeWithCatalog: aCatalog throught: aMerchantProcessor 
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	carts := Dictionary new.
	users := Dictionary new.
	users add: 2->'keloke'.
	users add: 3->'jajaja'.
	salesBook := OrderedCollection new.
	checkoutedCarts := OrderedCollection new.
	clientSales := Dictionary new.
	cartsPerClient := Dictionary new.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/11/2019 21:05:22' prior: 50784912!
createCartForId: anUserId withPassword: aString 
	
	| newCart nextCartId cartsForActualUser |
	
	self assertValidUser: anUserId with: aString .
	newCart := Cart acceptingItemsOf: catalog.
	
	nextCartId := carts size + 1.
	
	cartsForActualUser := cartsPerClient at: anUserId ifAbsent:[cartsPerClient at: anUserId -> OrderedCollection new.
		cartsForActualUser := cartsPerClient at: anUserId].
	cartsForActualUser add: nextCartId.
	cartsPerClient at: anUserId -> cartsPerClient.
	carts add: nextCartId->newCart.
	
	^nextCartId.! !

----QUIT----(11 November 2019 21:08:17) CuisUniversity-3938.image priorSource: 14477889!

----STARTUP---- (14 November 2019 17:15:55) as /home/gjimenez/Descargas/linux64/CuisUniversity-3938.image!


!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 17:19:42'!
ERROR!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 17:21:24'!
ERROR!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 17:22:19'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 17:23:39' prior: 50786724!
createCartForId: anUserId withPassword: aString 
	
	| newCart nextCartId cartsForActualUser |
	
	self assertValidUser: anUserId with: aString .
	newCart := Cart acceptingItemsOf: catalog.
	
	nextCartId := carts size + 1.
	
	cartsForActualUser := cartsPerClient at: anUserId ifAbsent:[cartsPerClient add: anUserId -> OrderedCollection new.
		cartsForActualUser := cartsPerClient at: anUserId].
	cartsForActualUser add: nextCartId.
	cartsPerClient at: anUserId -> cartsPerClient.
	carts add: nextCartId->newCart.
	
	^nextCartId.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 17:24:05' prior: 50786761!
createCartForId: anUserId withPassword: aString 
	
	| newCart nextCartId cartsForActualUser |
	
	self assertValidUser: anUserId with: aString .
	newCart := Cart acceptingItemsOf: catalog.
	
	nextCartId := carts size + 1.
	
	cartsForActualUser := cartsPerClient at: anUserId ifAbsent:[cartsPerClient add: anUserId -> OrderedCollection new.
		cartsForActualUser := cartsPerClient at: anUserId].
	cartsForActualUser add: nextCartId.
	cartsPerClient add: anUserId -> cartsPerClient.
	carts add: nextCartId->newCart.
	
	^nextCartId.! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 17:25:23'!
ERROR!
!XXX methodsFor: 'initialization' stamp: 'g j 11/14/2019 17:28:27' prior: 50786709!
initializeWithCatalog: aCatalog throught: aMerchantProcessor 
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	carts := Dictionary new.
	users := Dictionary new.
	users add: 2->'keloke'.
	users add: 3->'jajaja'.
	salesBook := OrderedCollection new.
	checkoutedCarts := Dictionary new.
	clientSales := Dictionary new.
	cartsPerClient := Dictionary new.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 17:29:02' prior: 50786678!
checkoutWithCartId: aCartId on: aDate aCreditCardNumber: aNumber anExpirationDate: monthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: monthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: aDate registeringOn: salesBook.
	
	[aCashier checkOut.] on: Cashier cartCanNotBeEmptyErrorMessage
	do: [:err | self error: self class CarritoVacio.].
	
	checkoutedCarts add: cartToCheckout.
	carts removeKey: aCartId ifAbsent: [].! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 17:29:10'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 17:29:32' prior: 50786819!
checkoutWithCartId: aCartId on: aDate aCreditCardNumber: aNumber anExpirationDate: monthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: monthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: aDate registeringOn: salesBook.
	
	[aCashier checkOut.] on: Cashier cartCanNotBeEmptyErrorMessage
	do: [:err | self error: self class CarritoVacio.].
	
	checkoutedCarts add: aCartId->cartToCheckout.
	carts removeKey: aCartId ifAbsent: [].! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 17:29:37'!
ERROR!
!Cashier methodsFor: 'checkout - private' stamp: 'g j 11/14/2019 17:36:34' prior: 50783444!
createSale
	| list |
	list := cart listBooks.
	^Sale of: total withItemList: list.
! !
!Cashier methodsFor: 'checkout - private' stamp: 'g j 11/14/2019 17:36:39' prior: 50786871!
createSale
	| list |
	list := cart listBooks.
	^Sale of: total withItemList: list.
	
! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 17:36:54'!
of: aSmallInteger withItemList: aDictionary 
	self shouldBeImplemented.! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 17:38:07' prior: 50786883!
of: anAmount withItemList: aBookList
	^self new initializeOf: anAmount withItemList: aBookList.
	
	! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 17:38:20'!
ERROR!

!classDefinition: #Sale category: #TusLibros stamp: 'g j 11/14/2019 17:38:24'!
Object subclass: #Sale
	instanceVariableNames: 'total saleItems amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: #TusLibros stamp: 'g j 11/14/2019 17:38:24'!
Object subclass: #Sale
	instanceVariableNames: 'total saleItems amount bookList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'g j 11/14/2019 17:38:24'!
initializeOf: anAmount withItemList: aBookList 
	self shouldBeImplemented.
	amount := anAmount.
	bookList := aBookList.! !
!Sale methodsFor: 'initialization' stamp: 'g j 11/14/2019 17:40:11' prior: 50786913!
initializeOf: anAmount withItemList: aBookList 
	total := anAmount.
	saleItems := aBookList.! !

Object subclass: #Sale
	instanceVariableNames: 'total saleItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: #TusLibros stamp: 'g j 11/14/2019 17:40:35'!
Object subclass: #Sale
	instanceVariableNames: 'total saleItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: Sale #initializeTotal: stamp: 'g j 11/14/2019 17:40:59'!
initializeTotal: aTotal

	total := aTotal.
	saleItems := Dictionary new.!

!methodRemoval: Sale class #of: stamp: 'g j 11/14/2019 17:41:13'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'g j 11/14/2019 17:42:17'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'g j 11/14/2019 17:42:17'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'g j 11/14/2019 17:42:17'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'g j 11/14/2019 17:42:17'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'g j 11/14/2019 17:42:17'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'g j 11/14/2019 17:42:17'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'g j 11/14/2019 17:42:17'!
PASSED!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 17:42:22'!
ERROR!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/14/2019 17:42:29'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/14/2019 17:42:29'!
ERROR!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/14/2019 17:42:29'!
ERROR!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/14/2019 17:42:29'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/14/2019 17:42:29'!
ERROR!

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/14/2019 17:42:29'!
ERROR!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/14/2019 17:42:29'!
PASSED!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/14/2019 17:42:29'!
PASSED!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 17:42:29'!
ERROR!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/14/2019 17:42:50'!
ERROR!

!methodRemoval: XXX class #withCatalog: stamp: 'g j 11/14/2019 17:43:36'!
withCatalog: aDictionary 
	^self new initializeWithCatalog: aDictionary.!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 17:44:10' prior: 50784595!
test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts

	| newCartId xxx |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	newCartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	self assert: (xxx listCartWithId: newCartId) isEmpty.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 17:44:13' prior: 50784639!
test02SeAgregaUnLibroAlCarritoYAlListarloAparece

	| newCartId xxx libros |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	newCartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: newCartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	libros := (xxx listCartWithId: newCartId).
	
	
	self assert: 1 equals: libros size.
	self assert: 1 equals: (libros at: testObjectsFactory itemSellByTheStore).! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 17:44:16' prior: 50784627!
test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido

	| xxx |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	
	self should: [xxx createCartForId: 4 withPassword: 'keloke'.]
		raise: Error - MessageNotUnderstood
		withMessageText: XXX usuarioInvalido.
! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 17:44:19' prior: 50784886!
test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart

	| xxx cart1Id cart2Id libros1 libros2 |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	
	cart1Id := xxx createCartForId: 2 withPassword: 'keloke'.
	cart2Id := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cart1Id withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	libros1 := (xxx listCartWithId: cart1Id).
	
	libros2 := (xxx listCartWithId: cart2Id).
	
	self assert: 1 equals: libros1 size.
	self assert: 1 equals: (libros1 at: testObjectsFactory itemSellByTheStore).
	
	self assert: libros2 isEmpty.! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 17:44:24' prior: 50785105!
test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos

	| xxx cart1Id cart2Id libros1 libros2 |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	
	cart1Id := xxx createCartForId: 2 withPassword: 'keloke'.
	cart2Id := xxx createCartForId: 3 withPassword: 'jajaja'.
	
	xxx addToCartWithId: cart1Id withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	xxx addToCartWithId: cart1Id withISBN: testObjectsFactory anotherItemSellByTheStore withQuantity: 1.
	
	xxx addToCartWithId: cart2Id withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	libros1 := (xxx listCartWithId: cart1Id).
	
	libros2 := (xxx listCartWithId: cart2Id).
	
	self assert: 2 equals: libros1 size.
	self assert: 1 equals: (libros1 at: testObjectsFactory itemSellByTheStore).
	self assert: 1 equals: (libros1 at: testObjectsFactory anotherItemSellByTheStore ).
	
	self assert: 1 equals: libros2 size.
	self assert: 1 equals: (libros2 at: testObjectsFactory itemSellByTheStore).! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 17:44:29' prior: 50786624!
test06NoSePuedeCheckoutearUnCarritoInexistente

	| xxx |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	self should: [xxx checkoutWithCartId: #id
		on: testObjectsFactory today
		 aCreditCardNumber: '113584'
		 anExpirationDate: testObjectsFactory notExpiredDate
		 andOwnerName: 'Dario'.]
	raise: Error - MessageNotUnderstood
	withMessageText: XXX CarritoInexistente.! !

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/14/2019 17:44:38'!
ERROR!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/14/2019 17:44:48'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/14/2019 17:44:48'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/14/2019 17:44:48'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/14/2019 17:44:48'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/14/2019 17:44:48'!
ERROR!

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/14/2019 17:44:48'!
PASSED!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/14/2019 17:44:48'!
PASSED!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/14/2019 17:44:48'!
PASSED!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 17:44:48'!
ERROR!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/14/2019 17:44:58'!
ERROR!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 18:18:23'!
ERROR!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 18:23:18'!
ERROR!

salesBook!

salesBook at: 1!

salesBook at: 1 total!

(salesBook at: 1) total!
!Cashier methodsFor: 'checkout - private' stamp: 'g j 11/14/2019 18:30:07' prior: 50783453!
registerSale
	
	| newSale |
	
	newSale  := self createSale.
	salesBook add: newSale.
	^newSale.
	! !
!Cashier methodsFor: 'checkout' stamp: 'g j 11/14/2019 18:30:24' prior: 50783457!
checkOut

	self calculateTotal.
	self debitTotal.

	^self registerSale.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 18:31:17' prior: 50786845!
checkoutWithCartId: aCartId on: aDate aCreditCardNumber: aNumber anExpirationDate: monthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout saleGenerated |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: monthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: aDate registeringOn: salesBook.
	
	[ saleGenerated := aCashier checkOut.] on: Cashier cartCanNotBeEmptyErrorMessage
	do: [:err | self error: self class CarritoVacio.].
	
	checkoutedCarts add: aCartId->cartToCheckout.
	carts removeKey: aCartId ifAbsent: [].! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 18:42:24' prior: 50787190!
checkoutWithCartId: aCartId on: aDate aCreditCardNumber: aNumber anExpirationDate: monthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout saleGenerated actualUserId actualUserSales |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: monthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: aDate registeringOn: salesBook.
	
	[ saleGenerated := aCashier checkOut.] on: Cashier cartCanNotBeEmptyErrorMessage
	do: [:err | self error: self class CarritoVacio.].
	
	actualUserId := cartsPerClient keyAtValue: aCartId.
	actualUserSales := clientSales at: actualUserId ifAbsent:[clientSales add: actualUserId -> OrderedCollection new.].
	
	checkoutedCarts add: aCartId->cartToCheckout.
	carts removeKey: aCartId ifAbsent: [].! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 18:43:35' prior: 50787214!
checkoutWithCartId: aCartId on: aDate aCreditCardNumber: aNumber anExpirationDate: monthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout saleGenerated actualUserId actualUserSales |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: monthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: aDate registeringOn: salesBook.
	
	[ saleGenerated := aCashier checkOut.] on: Cashier cartCanNotBeEmptyErrorMessage
	do: [:err | self error: self class CarritoVacio.].
	
	actualUserId := self retrieveUserOf: aCartId.
	actualUserSales := clientSales at: actualUserId ifAbsent:[clientSales add: actualUserId -> OrderedCollection new.].
	
	checkoutedCarts add: aCartId->cartToCheckout.
	carts removeKey: aCartId ifAbsent: [].! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 18:43:45'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 18:43:51'!
retrieveUserOf: aSmallInteger 
	self shouldBeImplemented.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 18:54:22' prior: 50787277!
retrieveUserOf: aCartId 
	| userID |
	
	 userID := cartsPerClient keyAtValue: (cartsPerClient detect: [:aCartList | aCartList includes: aCartId] ifNone: []).
	^userID. ! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 18:55:08'!
ERROR!

cartsPerClient keyAtValue: (cartsPerClient detect: [:aCartList | aCartList includes: aCartId] ifNone: []).!

cartsPerClient detect: [:aCartList | aCartList includes: aCartId]!

cartsPerClient!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 18:57:35'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:01:49' prior: 50786781!
createCartForId: anUserId withPassword: aString 
	
	| newCart nextCartId cartsForActualUser |
	
	self assertValidUser: anUserId with: aString .
	newCart := Cart acceptingItemsOf: catalog.
	
	nextCartId := carts size + 1.
	
	cartsForActualUser := cartsPerClient at: anUserId ifAbsent: [cartsPerClient add: anUserId -> OrderedCollection new.
		cartsForActualUser := cartsPerClient at: anUserId].
	cartsForActualUser add: nextCartId.
	carts add: nextCartId->newCart.
	
	^nextCartId.! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 19:02:06'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:03:21' prior: 50787244!
checkoutWithCartId: aCartId on: aDate aCreditCardNumber: aNumber anExpirationDate: monthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout saleGenerated actualUserId actualUserSales |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: monthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: aDate registeringOn: salesBook.
	
	[ saleGenerated := aCashier checkOut.] on: Cashier cartCanNotBeEmptyErrorMessage
	do: [:err | self error: self class CarritoVacio.].
	
	actualUserId := self retrieveUserOf: aCartId.
	actualUserSales := clientSales at: actualUserId ifAbsent:[clientSales add: actualUserId -> OrderedCollection new.].
	actualUserSales add: saleGenerated.
	
	checkoutedCarts add: aCartId->cartToCheckout.
	carts removeKey: aCartId ifAbsent: [].! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:06:00' prior: 50786454!
listPurchasesForUserId: anUserId withPassword: aString
	| sum |
	sum := 0. 
	(clientSales at: anUserId) do: [:a | sum _ sum + a].
	^sum
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:06:37' prior: 50786581!
test08DespuesDeCheckoutearElUsuarioTieneUnaCompra

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert: 10 equals: listaCompras.
	
	! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 19:06:38'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:07:31' prior: 50787326!
checkoutWithCartId: aCartId on: aDate aCreditCardNumber: aNumber anExpirationDate: monthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout saleGenerated actualUserId actualUserSales |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: monthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: aDate registeringOn: salesBook.
	
	[ saleGenerated := aCashier checkOut.] on: Cashier cartCanNotBeEmptyErrorMessage
	do: [:err | self error: self class CarritoVacio.].
	
	actualUserId := self retrieveUserOf: aCartId.
	actualUserSales := clientSales at: actualUserId ifAbsent:[clientSales add: actualUserId -> OrderedCollection new.
		actualUserSales := clientSales at: actualUserId.].
	actualUserSales add: saleGenerated.
	
	checkoutedCarts add: aCartId->cartToCheckout.
	carts removeKey: aCartId ifAbsent: [].! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 19:07:35'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:08:03' prior: 50787357!
listPurchasesForUserId: anUserId withPassword: aString
	| sum |
	sum := 0. 
	(clientSales at: anUserId) do: [:a | sum _ sum + a total].
	^sum
	! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 19:08:06'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/14/2019 19:08:06'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/14/2019 19:08:06'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/14/2019 19:08:07'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/14/2019 19:08:07'!
PASSED!

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/14/2019 19:08:07'!
PASSED!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/14/2019 19:08:07'!
PASSED!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/14/2019 19:08:07'!
PASSED!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 19:08:07'!
PASSED!
!Sale methodsFor: 'total' stamp: 'g j 11/14/2019 19:11:19'!
itemsSold
	
	^ saleItems.! !
!Sale methodsFor: 'total' stamp: 'g j 11/14/2019 19:16:26'!
soldOf: aIsbn

! !
!Sale methodsFor: 'total' stamp: 'g j 11/14/2019 19:16:53' prior: 50787469!
soldOf: aIsbn

	^saleItems ! !
!Sale methodsFor: 'total' stamp: 'g j 11/14/2019 19:17:42' prior: 50787472!
soldOf: aIsbn

	^saleItems at: aIsbn ifAbsent:[0].! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:22:19' prior: 50787365!
test08DespuesDeCheckoutearElUsuarioTieneUnaCompra

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert: 10 equals: listaCompras.
	self assert: (listaCompras do: [:aSale | (aSale soldOf: testObjectsFactory itemSellByTheStore) = 1]).
	
	! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 19:22:26'!
ERROR!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 19:22:26'!
ERROR!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 19:22:38'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:25:04' prior: 50787427!
listPurchasesForUserId: anUserId withPassword: aString
	| sum |
	sum := 0. 
	"(clientSales at: anUserId) do: [:a | sum _ sum + a total]."
	^clientSales at: anUserId.
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:26:07' prior: 50787481!
test08DespuesDeCheckoutearElUsuarioTieneUnaCompra

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert: (listaCompras do: [:aSale | (aSale soldOf: testObjectsFactory itemSellByTheStore) = 1]).
	
	! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 19:26:17'!
ERROR!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:27:09' prior: 50787526!
test08DespuesDeCheckoutearElUsuarioTieneUnaCompra

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert: (listaCompras do: [:aSale | (aSale soldOf: testObjectsFactory itemSellByTheStore) = 1 ifTrue:[true] ifFalse:[false]]).
	
	! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 19:27:13'!
ERROR!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:28:03' prior: 50787554!
test08DespuesDeCheckoutearElUsuarioTieneUnaCompra

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert: (listaCompras do: [:aSale | ((aSale soldOf: testObjectsFactory itemSellByTheStore) = 1) ifTrue:[true]]).
	
	! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 19:28:09'!
ERROR!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:28:49' prior: 50787583!
test08DespuesDeCheckoutearElUsuarioTieneUnaCompra

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert: (listaCompras do: [:aSale | (aSale soldOf: testObjectsFactory itemSellByTheStore) = 1]).
	
	! !

aIsbn!

saleItems at: aIsbn!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:30:06' prior: 50787611!
test08DespuesDeCheckoutearElUsuarioTieneUnaCompra

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert: (listaCompras allSatisfy: [:aSale | (aSale soldOf: testObjectsFactory itemSellByTheStore) = 1]).
	
	! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 19:30:50'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/14/2019 19:30:53'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/14/2019 19:30:53'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/14/2019 19:30:53'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/14/2019 19:30:53'!
PASSED!

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/14/2019 19:30:53'!
PASSED!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/14/2019 19:30:53'!
PASSED!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/14/2019 19:30:53'!
PASSED!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 19:30:53'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:31:49' prior: 50787636!
test08DespuesDeCheckoutearElUsuarioTieneUnaCompra

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert: (listaCompras allSatisfy: [:aSale | ((aSale soldOf: testObjectsFactory itemSellByTheStore) = 1) & (aSale total = 10)]).
	
	! !

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 19:31:52'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:35:34'!
test09DespuesDeDosComprasElClienteTieneDosSales

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert: (listaCompras allSatisfy: [:aSale | ((aSale soldOf: testObjectsFactory itemSellByTheStore) = 1) & (aSale total = 10)]).
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:36:06'!
test10SiFallaElCheckoutEntoncesElClienteNoTieneNuevasCompras

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert: (listaCompras allSatisfy: [:aSale | ((aSale soldOf: testObjectsFactory itemSellByTheStore) = 1) & (aSale total = 10)]).
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:36:19' prior: 50787745!
test10SiFallaElCheckoutEntoncesElClienteNoTieneNuevasCompras

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory expiredCreditCard 
	andOwnerName: 'Carlitos'.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert: (listaCompras allSatisfy: [:aSale | ((aSale soldOf: testObjectsFactory itemSellByTheStore) = 1) & (aSale total = 10)]).
	
	! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'g j 11/14/2019 19:36:53'!
expiredDate

^(Month month: today monthIndex year: today yearNumber - 1)! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:37:58' prior: 50787771!
test10SiFallaElCheckoutEntoncesElClienteNoTieneNuevasCompras

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	self should:[
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory expiredDate 
	andOwnerName: 'Carlitos'.]
		raise: Error - MessageNotUnderstood
			withMessageText: ''.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert: (listaCompras allSatisfy: [:aSale | ((aSale soldOf: testObjectsFactory itemSellByTheStore) = 1) & (aSale total = 10)]).
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:38:21' prior: 50787802!
test10SiFallaElCheckoutEntoncesElClienteNoTieneNuevasCompras

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	self should:[
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory expiredDate 
	andOwnerName: 'Carlitos'.]
		raise: Error - MessageNotUnderstood
			withMessageText: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self assert: (listaCompras allSatisfy: [:aSale | ((aSale soldOf: testObjectsFactory itemSellByTheStore) = 1) & (aSale total = 10)]).
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:39:28' prior: 50787830!
test10SiFallaElCheckoutEntoncesElClienteNoTieneNuevasCompras

	| xxx cartId listaComprasAntes |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	listaComprasAntes := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	self should:[
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory expiredDate 
	andOwnerName: 'Carlitos'.]
		raise: Error - MessageNotUnderstood
			withMessageText: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: listaComprasAntes size = (xxx listPurchasesForUserId: 2 withPassword: 'keloke') size.
	
	! !

!testRun: #XXXTest #test10SiFallaElCheckoutEntoncesElClienteNoTieneNuevasCompras stamp: 'g j 11/14/2019 19:39:30'!
ERROR!

!testRun: #XXXTest #test10SiFallaElCheckoutEntoncesElClienteNoTieneNuevasCompras stamp: 'g j 11/14/2019 19:39:31'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:39:58' prior: 50787517!
listPurchasesForUserId: anUserId withPassword: aString
	| sum |
	sum := 0. 
	"(clientSales at: anUserId) do: [:a | sum _ sum + a total]."
	^clientSales at: anUserId ifAbsent:[OrderedCollection new].
	! !

!testRun: #XXXTest #test10SiFallaElCheckoutEntoncesElClienteNoTieneNuevasCompras stamp: 'g j 11/14/2019 19:40:07'!
PASSED!

!testRun: #XXXTest #test10SiFallaElCheckoutEntoncesElClienteNoTieneNuevasCompras stamp: 'g j 11/14/2019 19:40:12'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:43:02' prior: 50787720!
test09DespuesDeDosComprasElClienteTieneDosSales

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
		
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	self assert: listaCompras size = 2.
	
	
	
	self assert: (listaCompras allSatisfy: [:aSale | ((aSale soldOf: testObjectsFactory itemSellByTheStore) = 1) & (aSale total = 10)]).
	
	! !

!testRun: #XXXTest #test09DespuesDeDosComprasElClienteTieneDosSales stamp: 'g j 11/14/2019 19:43:04'!
FAILURE!

!testRun: #XXXTest #test09DespuesDeDosComprasElClienteTieneDosSales stamp: 'g j 11/14/2019 19:43:04'!
FAILURE!

!testRun: #XXXTest #test09DespuesDeDosComprasElClienteTieneDosSales stamp: 'g j 11/14/2019 19:46:26'!
FAILURE!

!testRun: #XXXTest #test09DespuesDeDosComprasElClienteTieneDosSales stamp: 'g j 11/14/2019 19:46:26'!
FAILURE!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:46:48' prior: 50787914!
test09DespuesDeDosComprasElClienteTieneDosSales

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
		
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	self assert: listaCompras size = 2.
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:46:57' prior: 50787967!
test09DespuesDeDosComprasElClienteTieneDosSales

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	xxx addToCartWithId: cartId withISBN: testObjectsFactory anotherItemSellByTheStore withQuantity: 1.	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
		
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	self assert: listaCompras size = 2.
	! !

!testRun: #XXXTest #test09DespuesDeDosComprasElClienteTieneDosSales stamp: 'g j 11/14/2019 19:46:59'!
FAILURE!

!testRun: #XXXTest #test09DespuesDeDosComprasElClienteTieneDosSales stamp: 'g j 11/14/2019 19:46:59'!
FAILURE!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:49:31' prior: 50787391!
checkoutWithCartId: aCartId on: aDate aCreditCardNumber: aNumber anExpirationDate: monthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout saleGenerated actualUserId actualUserSales |
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: monthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: aDate registeringOn: salesBook.
	
	[ saleGenerated := aCashier checkOut.] on: Cashier cartCanNotBeEmptyErrorMessage
	do: [:err | self error: self class CarritoVacio.].
	
	actualUserId := self retrieveUserOf: aCartId.
	actualUserSales := clientSales at: actualUserId ifAbsent:[clientSales add: actualUserId -> OrderedCollection new.
		actualUserSales := clientSales at: actualUserId.].
	actualUserSales add: saleGenerated.
	clientSales add: actualUserId-> actualUserSales.
	
	checkoutedCarts add: aCartId->cartToCheckout.
	carts removeKey: aCartId ifAbsent: [].! !

!testRun: #XXXTest #test09DespuesDeDosComprasElClienteTieneDosSales stamp: 'g j 11/14/2019 19:49:41'!
FAILURE!

!testRun: #XXXTest #test09DespuesDeDosComprasElClienteTieneDosSales stamp: 'g j 11/14/2019 19:53:24'!
FAILURE!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:54:29' prior: 50788002!
test09DespuesDeDosComprasElClienteTieneDosSales

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	xxx addToCartWithId: cartId withISBN: testObjectsFactory anotherItemSellByTheStore withQuantity: 1.	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
		
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	self assert: listaCompras size = 2.
	! !

!testRun: #XXXTest #test09DespuesDeDosComprasElClienteTieneDosSales stamp: 'g j 11/14/2019 19:54:31'!
PASSED!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:54:41' prior: 50788085!
test09DespuesDeDosComprasElClienteTieneDosSales

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	xxx addToCartWithId: cartId withISBN: testObjectsFactory anotherItemSellByTheStore withQuantity: 1.	
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	self assert: listaCompras size = 2.
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:55:40'!
test10NoSePuedeCheckoutearUnCarritoCheckouteado

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	
	! !
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:56:05'!
test11NoSePuedeCheckoutearUnCarritoCheckouteado

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	
	! !

!methodRemoval: XXXTest #test10NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 19:56:05'!
test10NoSePuedeCheckoutearUnCarritoCheckouteado

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	
	listaCompras := xxx listPurchasesForUserId: 2 withPassword: 'keloke'.
	
	
	!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:57:12' prior: 50788168!
test11NoSePuedeCheckoutearUnCarritoCheckouteado

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
	self should: [	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.]
		raise: Error - MessageNotUnderstood
			withMessageText: XXX CartAlreadyCheckoutead.
	
	
	! !

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 19:57:17'!
ERROR!

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 19:57:17'!
ERROR!
!Object class methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:57:23'!
CartAlreadyCheckoutead
	self shouldBeImplemented.! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:57:25'!
CartAlreadyCheckoutead
	self shouldBeImplemented.! !
!XXX class methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:57:35' prior: 50788238!
CartAlreadyCheckoutead
	^'Carrito ya checkouteado'! !

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 19:57:41'!
FAILURE!
!XXXTest methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:57:58' prior: 50788199!
test11NoSePuedeCheckoutearUnCarritoCheckouteado

	| xxx cartId listaCompras |
	xxx := XXX withCatalog: testObjectsFactory defaultCatalog throught: self.
	
	cartId := xxx createCartForId: 2 withPassword: 'keloke'.
	
	xxx addToCartWithId: cartId withISBN: testObjectsFactory itemSellByTheStore withQuantity: 1.
	xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.
	
	self should: [xxx checkoutWithCartId: cartId
	on: testObjectsFactory today 
	aCreditCardNumber: '123456'
	anExpirationDate: testObjectsFactory notExpiredDate 
	andOwnerName: 'Carlitos'.]
		raise: Error - MessageNotUnderstood
			withMessageText: XXX CartAlreadyCheckoutead.
	
	
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:58:39' prior: 50788044!
checkoutWithCartId: aCartId on: aDate aCreditCardNumber: aNumber anExpirationDate: monthOfYear andOwnerName: aName

	| aCashier aCreditCard cartToCheckout saleGenerated actualUserId actualUserSales |
	self assertCarritoNoEstaCheckouteado: aCartId.
	self assertCarritoExiste: aCartId.
	cartToCheckout := carts at: aCartId.
	aCreditCard := CreditCard expiringOn: monthOfYear.
	aCashier := Cashier toCheckout: cartToCheckout charging: aCreditCard throught: merchantProcessor on: aDate registeringOn: salesBook.
	
	[ saleGenerated := aCashier checkOut.] on: Cashier cartCanNotBeEmptyErrorMessage
	do: [:err | self error: self class CarritoVacio.].
	
	actualUserId := self retrieveUserOf: aCartId.
	actualUserSales := clientSales at: actualUserId ifAbsent:[clientSales add: actualUserId -> OrderedCollection new.
		actualUserSales := clientSales at: actualUserId.].
	actualUserSales add: saleGenerated.
	clientSales add: actualUserId-> actualUserSales.
	
	checkoutedCarts add: aCartId->cartToCheckout.
	carts removeKey: aCartId ifAbsent: [].! !

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 19:58:47'!
ERROR!

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 19:58:47'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:59:01'!
assertCarritoNoEstaCheckouteado: aSmallInteger 
	self shouldBeImplemented.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 19:59:48' prior: 50788321!
assertCarritoNoEstaCheckouteado: aCartId 
	^carts includes: aCartId & (checkoutedCarts includes: aCartId = false).! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 20:00:19' prior: 50788327!
assertCarritoNoEstaCheckouteado: aCartId 
	^checkoutedCarts includes: aCartId = false! !

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 20:00:28'!
FAILURE!

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 20:00:38'!
FAILURE!

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 20:00:38'!
FAILURE!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 20:01:30' prior: 50788334!
assertCarritoNoEstaCheckouteado: aCartId 
	^(checkoutedCarts includes: aCartId) ifFalse:[self error: XXX CartAlreadyCheckoutead ].! !

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 20:01:49'!
ERROR!

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 20:01:49'!
ERROR!

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 20:02:53'!
ERROR!

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 20:03:41'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 20:04:40' prior: 50788351!
assertCarritoNoEstaCheckouteado: aCartId 
	^(checkoutedCarts includesKey: aCartId) ifFalse:[self error: XXX CartAlreadyCheckoutead ].! !

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/14/2019 20:04:50'!
FAILURE!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/14/2019 20:04:50'!
FAILURE!

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 20:05:05'!
ERROR!

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 20:05:05'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 20:05:37' prior: 50788372!
assertCarritoNoEstaCheckouteado: aCartId 
	^(checkoutedCarts includesKey: aCartId) ifTrue: [self error: XXX CartAlreadyCheckoutead ].! !

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 20:05:41'!
PASSED!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/14/2019 20:05:43'!
PASSED!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/14/2019 20:05:48'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/14/2019 20:06:15'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/14/2019 20:06:15'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/14/2019 20:06:15'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/14/2019 20:06:15'!
PASSED!

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/14/2019 20:06:15'!
PASSED!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/14/2019 20:06:15'!
PASSED!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/14/2019 20:06:15'!
PASSED!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 20:06:15'!
PASSED!

!testRun: #XXXTest #test09DespuesDeDosComprasElClienteTieneDosSales stamp: 'g j 11/14/2019 20:06:15'!
ERROR!

!testRun: #XXXTest #test10SiFallaElCheckoutEntoncesElClienteNoTieneNuevasCompras stamp: 'g j 11/14/2019 20:06:15'!
PASSED!

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 20:06:15'!
PASSED!

!testRun: #XXXTest #test09DespuesDeDosComprasElClienteTieneDosSales stamp: 'g j 11/14/2019 20:06:15'!
ERROR!

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 20:06:21'!
PASSED!

!testRun: #XXXTest #test10SiFallaElCheckoutEntoncesElClienteNoTieneNuevasCompras stamp: 'g j 11/14/2019 20:06:22'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/14/2019 20:06:23'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/14/2019 20:06:23'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/14/2019 20:06:23'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/14/2019 20:06:23'!
PASSED!

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/14/2019 20:06:23'!
PASSED!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/14/2019 20:06:23'!
PASSED!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/14/2019 20:06:23'!
PASSED!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 20:06:23'!
PASSED!

!testRun: #XXXTest #test09DespuesDeDosComprasElClienteTieneDosSales stamp: 'g j 11/14/2019 20:06:23'!
ERROR!

!testRun: #XXXTest #test10SiFallaElCheckoutEntoncesElClienteNoTieneNuevasCompras stamp: 'g j 11/14/2019 20:06:23'!
PASSED!

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 20:06:23'!
PASSED!

!testRun: #XXXTest #test09DespuesDeDosComprasElClienteTieneDosSales stamp: 'g j 11/14/2019 20:06:23'!
ERROR!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/14/2019 20:06:28'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/14/2019 20:06:30'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/14/2019 20:06:31'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/14/2019 20:06:31'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/14/2019 20:06:31'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/14/2019 20:06:31'!
PASSED!

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/14/2019 20:06:31'!
PASSED!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/14/2019 20:06:31'!
PASSED!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/14/2019 20:06:31'!
PASSED!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 20:06:31'!
PASSED!

!testRun: #XXXTest #test09DespuesDeDosComprasElClienteTieneDosSales stamp: 'g j 11/14/2019 20:06:32'!
ERROR!

!testRun: #XXXTest #test10SiFallaElCheckoutEntoncesElClienteNoTieneNuevasCompras stamp: 'g j 11/14/2019 20:06:32'!
PASSED!

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 20:06:32'!
PASSED!

!testRun: #XXXTest #test09DespuesDeDosComprasElClienteTieneDosSales stamp: 'g j 11/14/2019 20:06:32'!
ERROR!

!testRun: #XXXTest #test10SiFallaElCheckoutEntoncesElClienteNoTieneNuevasCompras stamp: 'g j 11/14/2019 20:06:45'!
PASSED!

!testRun: #XXXTest #test09DespuesDeDosComprasElClienteTieneDosSales stamp: 'g j 11/14/2019 20:06:48'!
ERROR!

!testRun: #XXXTest #test09DespuesDeDosComprasElClienteTieneDosSales stamp: 'g j 11/14/2019 20:06:48'!
ERROR!

!methodRemoval: XXX #initializeWithCatalog: stamp: 'g j 11/14/2019 20:08:03'!
initializeWithCatalog: aCatalog 
	catalog := aCatalog.
	carts := Dictionary new.
	users := Dictionary new.
	users add: 2->'keloke'.
	users add: 3->'jajaja'.!

!classDefinition: #XXX category: #TusLibros stamp: 'g j 11/14/2019 20:08:31'!
Object subclass: #XXX
	instanceVariableNames: 'catalog carts users merchantProcessor salesBook checkoutedCarts clientSales cartsPerClient currentCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!XXX methodsFor: 'initialization' stamp: 'g j 11/14/2019 20:08:29' prior: 50786804!
initializeWithCatalog: aCatalog throught: aMerchantProcessor 
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	carts := Dictionary new.
	users := Dictionary new.
	users add: 2->'keloke'.
	users add: 3->'jajaja'.
	salesBook := OrderedCollection new.
	checkoutedCarts := Dictionary new.
	clientSales := Dictionary new.
	cartsPerClient := Dictionary new.
	currentCartId := 0.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 20:09:05' prior: 50787304!
createCartForId: anUserId withPassword: aString 
	
	| newCart nextCartId cartsForActualUser |
	
	self assertValidUser: anUserId with: aString .
	newCart := Cart acceptingItemsOf: catalog.
	
	nextCartId := self nextCartId.
	
	cartsForActualUser := cartsPerClient at: anUserId ifAbsent: [cartsPerClient add: anUserId -> OrderedCollection new.
		cartsForActualUser := cartsPerClient at: anUserId].
	cartsForActualUser add: nextCartId.
	carts add: nextCartId->newCart.
	
	^nextCartId.! !

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 20:09:16'!
ERROR!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 20:09:22'!
nextCartId
	self shouldBeImplemented.! !
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 20:10:12' prior: 50788617!
nextCartId
	| idToReturn |
	idToReturn := currentCartId.
	currentCartId := currentCartId.
	^idToReturn.! !

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 20:10:21'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/14/2019 20:10:21'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/14/2019 20:10:21'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/14/2019 20:10:21'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/14/2019 20:10:21'!
FAILURE!

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/14/2019 20:10:21'!
FAILURE!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/14/2019 20:10:21'!
PASSED!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/14/2019 20:10:21'!
PASSED!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 20:10:21'!
PASSED!

!testRun: #XXXTest #test09DespuesDeDosComprasElClienteTieneDosSales stamp: 'g j 11/14/2019 20:10:21'!
ERROR!

!testRun: #XXXTest #test10SiFallaElCheckoutEntoncesElClienteNoTieneNuevasCompras stamp: 'g j 11/14/2019 20:10:21'!
PASSED!

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 20:10:21'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/14/2019 20:10:32'!
FAILURE!
!XXX methodsFor: 'as yet unclassified' stamp: 'g j 11/14/2019 20:11:23' prior: 50788622!
nextCartId
	| idToReturn |
	idToReturn := currentCartId.
	currentCartId := currentCartId + 1.
	^idToReturn.! !

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 20:11:29'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/14/2019 20:11:29'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/14/2019 20:11:29'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/14/2019 20:11:29'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/14/2019 20:11:29'!
PASSED!

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/14/2019 20:11:29'!
PASSED!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/14/2019 20:11:29'!
PASSED!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/14/2019 20:11:29'!
PASSED!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 20:11:29'!
PASSED!

!testRun: #XXXTest #test09DespuesDeDosComprasElClienteTieneDosSales stamp: 'g j 11/14/2019 20:11:29'!
PASSED!

!testRun: #XXXTest #test10SiFallaElCheckoutEntoncesElClienteNoTieneNuevasCompras stamp: 'g j 11/14/2019 20:11:29'!
PASSED!

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 20:11:29'!
PASSED!

!testRun: #XXXTest #test01CreandoUnNuevoCarritoYEsDevueltoPorListCarts stamp: 'g j 11/14/2019 20:11:40'!
PASSED!

!testRun: #XXXTest #test02SeAgregaUnLibroAlCarritoYAlListarloAparece stamp: 'g j 11/14/2019 20:11:40'!
PASSED!

!testRun: #XXXTest #test03NoSePuedeCrearUnCarritoConUnUsuarioInvalido stamp: 'g j 11/14/2019 20:11:40'!
PASSED!

!testRun: #XXXTest #test04SeCreanDosCarritosYAmbosSonDevueltosPorListCart stamp: 'g j 11/14/2019 20:11:40'!
PASSED!

!testRun: #XXXTest #test05SeCreanDosCarritosDeDiferentesUsuariosYSonDistintos stamp: 'g j 11/14/2019 20:11:40'!
PASSED!

!testRun: #XXXTest #test06NoSePuedeCheckoutearUnCarritoInexistente stamp: 'g j 11/14/2019 20:11:40'!
PASSED!

!testRun: #XXXTest #test07NoSePuedeCheckoutearUnCarritoVacio stamp: 'g j 11/14/2019 20:11:40'!
PASSED!

!testRun: #XXXTest #test08DespuesDeCheckoutearElUsuarioTieneUnaCompra stamp: 'g j 11/14/2019 20:11:40'!
PASSED!

!testRun: #XXXTest #test09DespuesDeDosComprasElClienteTieneDosSales stamp: 'g j 11/14/2019 20:11:40'!
PASSED!

!testRun: #XXXTest #test10SiFallaElCheckoutEntoncesElClienteNoTieneNuevasCompras stamp: 'g j 11/14/2019 20:11:40'!
PASSED!

!testRun: #XXXTest #test11NoSePuedeCheckoutearUnCarritoCheckouteado stamp: 'g j 11/14/2019 20:11:40'!
PASSED!

Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: #TusLibros stamp: 'g j 11/14/2019 20:36:48'!
Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'nil' stamp: 'g j 11/14/2019 20:37:07'!
avanzarMin: aMin! !

Object subclass: #Clock
	instanceVariableNames: 'currentTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: #TusLibros stamp: 'g j 11/14/2019 20:37:13'!
Object subclass: #Clock
	instanceVariableNames: 'currentTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'nil' stamp: 'g j 11/14/2019 20:37:23'!
currentTime
	^currentTime ! !

GregorianDateTime  now!

GregorianDateTime  now  time!

GregorianDateTime  now!

GregorianDateTime !

GregorianDateTime now!

GregorianDateTime now timeOfDay!

GregorianDateTime now!

GregorianDateTime now timeOfDay!

GregorianDateTime now timeOfDay !

GregorianDateTime now timeOfDay !

GregorianDateTime now timeOfDay !

GregorianDateTime now timeOfDay !

GregorianDateTime!

t:=GregorianDateTime now!

t distanceTo: GregorianDateTime now.!

t distanceTo: GregorianDateTime now/60*30.!

t distanceTo: GregorianDateTime now!

(t distanceTo: GregorianDateTime now)!